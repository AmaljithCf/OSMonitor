// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipcMessage.proto

#ifndef PROTOBUF_ipcMessage_2eproto__INCLUDED
#define PROTOBUF_ipcMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace ipc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ipcMessage_2eproto();
void protobuf_AssignDesc_ipcMessage_2eproto();
void protobuf_ShutdownFile_ipcMessage_2eproto();

class ipcData;
class ipcMessage;

enum ipcMessage_ipcType {
  ipcMessage_ipcType_ACTION = 0,
  ipcMessage_ipcType_RESULT = 1,
  ipcMessage_ipcType_COMMAND = 2,
  ipcMessage_ipcType_EXIT = 10
};
bool ipcMessage_ipcType_IsValid(int value);
const ipcMessage_ipcType ipcMessage_ipcType_ipcType_MIN = ipcMessage_ipcType_ACTION;
const ipcMessage_ipcType ipcMessage_ipcType_ipcType_MAX = ipcMessage_ipcType_EXIT;
const int ipcMessage_ipcType_ipcType_ARRAYSIZE = ipcMessage_ipcType_ipcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ipcMessage_ipcType_descriptor();
inline const ::std::string& ipcMessage_ipcType_Name(ipcMessage_ipcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ipcMessage_ipcType_descriptor(), value);
}
inline bool ipcMessage_ipcType_Parse(
    const ::std::string& name, ipcMessage_ipcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ipcMessage_ipcType>(
    ipcMessage_ipcType_descriptor(), name, value);
}
enum ipcAction {
  OS = 1,
  CPU = 2,
  PROCESSOR = 3,
  PROCESS = 4,
  CONNECTION = 5,
  NETWORK = 6,
  DMESG = 7,
  LOGCAT_RADIO = 8,
  LOGCAT_EVENT = 9,
  LOGCAT_SYSTEM = 10,
  LOGCAT_MAIN = 11,
  SETPRIORITY = 20,
  KILLPROCESS = 21,
  SETCPUSTATUS = 22,
  SETCPUMAXFREQ = 23,
  SETCPUMINFREQ = 24,
  SETCPUGORV = 25
};
bool ipcAction_IsValid(int value);
const ipcAction ipcAction_MIN = OS;
const ipcAction ipcAction_MAX = SETCPUGORV;
const int ipcAction_ARRAYSIZE = ipcAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ipcAction_descriptor();
inline const ::std::string& ipcAction_Name(ipcAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ipcAction_descriptor(), value);
}
inline bool ipcAction_Parse(
    const ::std::string& name, ipcAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ipcAction>(
    ipcAction_descriptor(), name, value);
}
// ===================================================================

class ipcData : public ::google::protobuf::Message {
 public:
  ipcData();
  virtual ~ipcData();
  
  ipcData(const ipcData& from);
  
  inline ipcData& operator=(const ipcData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipcData& default_instance();
  
  void Swap(ipcData* other);
  
  // implements Message ----------------------------------------------
  
  ipcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipcData& from);
  void MergeFrom(const ipcData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .com.eolwral.osmonitor.ipc.ipcAction action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline com::eolwral::osmonitor::ipc::ipcAction action() const;
  inline void set_action(com::eolwral::osmonitor::ipc::ipcAction value);
  
  // repeated bytes payload = 2;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload(int index) const;
  inline ::std::string* mutable_payload(int index);
  inline void set_payload(int index, const ::std::string& value);
  inline void set_payload(int index, const char* value);
  inline void set_payload(int index, const void* value, size_t size);
  inline ::std::string* add_payload();
  inline void add_payload(const ::std::string& value);
  inline void add_payload(const char* value);
  inline void add_payload(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& payload() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_payload();
  
  // @@protoc_insertion_point(class_scope:com.eolwral.osmonitor.ipc.ipcData)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> payload_;
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ipcMessage_2eproto();
  friend void protobuf_AssignDesc_ipcMessage_2eproto();
  friend void protobuf_ShutdownFile_ipcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ipcData* default_instance_;
};
// -------------------------------------------------------------------

class ipcMessage : public ::google::protobuf::Message {
 public:
  ipcMessage();
  virtual ~ipcMessage();
  
  ipcMessage(const ipcMessage& from);
  
  inline ipcMessage& operator=(const ipcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ipcMessage& default_instance();
  
  void Swap(ipcMessage* other);
  
  // implements Message ----------------------------------------------
  
  ipcMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ipcMessage& from);
  void MergeFrom(const ipcMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ipcMessage_ipcType ipcType;
  static const ipcType ACTION = ipcMessage_ipcType_ACTION;
  static const ipcType RESULT = ipcMessage_ipcType_RESULT;
  static const ipcType COMMAND = ipcMessage_ipcType_COMMAND;
  static const ipcType EXIT = ipcMessage_ipcType_EXIT;
  static inline bool ipcType_IsValid(int value) {
    return ipcMessage_ipcType_IsValid(value);
  }
  static const ipcType ipcType_MIN =
    ipcMessage_ipcType_ipcType_MIN;
  static const ipcType ipcType_MAX =
    ipcMessage_ipcType_ipcType_MAX;
  static const int ipcType_ARRAYSIZE =
    ipcMessage_ipcType_ipcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ipcType_descriptor() {
    return ipcMessage_ipcType_descriptor();
  }
  static inline const ::std::string& ipcType_Name(ipcType value) {
    return ipcMessage_ipcType_Name(value);
  }
  static inline bool ipcType_Parse(const ::std::string& name,
      ipcType* value) {
    return ipcMessage_ipcType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.eolwral.osmonitor.ipc.ipcMessage.ipcType type = 1 [default = ACTION];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::eolwral::osmonitor::ipc::ipcMessage_ipcType type() const;
  inline void set_type(::com::eolwral::osmonitor::ipc::ipcMessage_ipcType value);
  
  // repeated .com.eolwral.osmonitor.ipc.ipcData data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::com::eolwral::osmonitor::ipc::ipcData& data(int index) const;
  inline ::com::eolwral::osmonitor::ipc::ipcData* mutable_data(int index);
  inline ::com::eolwral::osmonitor::ipc::ipcData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::eolwral::osmonitor::ipc::ipcData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::eolwral::osmonitor::ipc::ipcData >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:com.eolwral.osmonitor.ipc.ipcMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::com::eolwral::osmonitor::ipc::ipcData > data_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ipcMessage_2eproto();
  friend void protobuf_AssignDesc_ipcMessage_2eproto();
  friend void protobuf_ShutdownFile_ipcMessage_2eproto();
  
  void InitAsDefaultInstance();
  static ipcMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ipcData

// required .com.eolwral.osmonitor.ipc.ipcAction action = 1;
inline bool ipcData::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipcData::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipcData::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipcData::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline com::eolwral::osmonitor::ipc::ipcAction ipcData::action() const {
  return static_cast< com::eolwral::osmonitor::ipc::ipcAction >(action_);
}
inline void ipcData::set_action(com::eolwral::osmonitor::ipc::ipcAction value) {
  GOOGLE_DCHECK(com::eolwral::osmonitor::ipc::ipcAction_IsValid(value));
  set_has_action();
  action_ = value;
}

// repeated bytes payload = 2;
inline int ipcData::payload_size() const {
  return payload_.size();
}
inline void ipcData::clear_payload() {
  payload_.Clear();
}
inline const ::std::string& ipcData::payload(int index) const {
  return payload_.Get(index);
}
inline ::std::string* ipcData::mutable_payload(int index) {
  return payload_.Mutable(index);
}
inline void ipcData::set_payload(int index, const ::std::string& value) {
  payload_.Mutable(index)->assign(value);
}
inline void ipcData::set_payload(int index, const char* value) {
  payload_.Mutable(index)->assign(value);
}
inline void ipcData::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ipcData::add_payload() {
  return payload_.Add();
}
inline void ipcData::add_payload(const ::std::string& value) {
  payload_.Add()->assign(value);
}
inline void ipcData::add_payload(const char* value) {
  payload_.Add()->assign(value);
}
inline void ipcData::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ipcData::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ipcData::mutable_payload() {
  return &payload_;
}

// -------------------------------------------------------------------

// ipcMessage

// required .com.eolwral.osmonitor.ipc.ipcMessage.ipcType type = 1 [default = ACTION];
inline bool ipcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ipcMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ipcMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ipcMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::eolwral::osmonitor::ipc::ipcMessage_ipcType ipcMessage::type() const {
  return static_cast< ::com::eolwral::osmonitor::ipc::ipcMessage_ipcType >(type_);
}
inline void ipcMessage::set_type(::com::eolwral::osmonitor::ipc::ipcMessage_ipcType value) {
  GOOGLE_DCHECK(::com::eolwral::osmonitor::ipc::ipcMessage_ipcType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .com.eolwral.osmonitor.ipc.ipcData data = 2;
inline int ipcMessage::data_size() const {
  return data_.size();
}
inline void ipcMessage::clear_data() {
  data_.Clear();
}
inline const ::com::eolwral::osmonitor::ipc::ipcData& ipcMessage::data(int index) const {
  return data_.Get(index);
}
inline ::com::eolwral::osmonitor::ipc::ipcData* ipcMessage::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::com::eolwral::osmonitor::ipc::ipcData* ipcMessage::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::eolwral::osmonitor::ipc::ipcData >&
ipcMessage::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::eolwral::osmonitor::ipc::ipcData >*
ipcMessage::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::eolwral::osmonitor::ipc::ipcMessage_ipcType>() {
  return ::com::eolwral::osmonitor::ipc::ipcMessage_ipcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::eolwral::osmonitor::ipc::ipcAction>() {
  return com::eolwral::osmonitor::ipc::ipcAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipcMessage_2eproto__INCLUDED
