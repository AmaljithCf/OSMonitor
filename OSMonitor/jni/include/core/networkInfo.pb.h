// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkInfo.proto

#ifndef PROTOBUF_networkInfo_2eproto__INCLUDED
#define PROTOBUF_networkInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_networkInfo_2eproto();
void protobuf_AssignDesc_networkInfo_2eproto();
void protobuf_ShutdownFile_networkInfo_2eproto();

class networkInfo;

// ===================================================================

class networkInfo : public ::google::protobuf::Message {
 public:
  networkInfo();
  virtual ~networkInfo();

  networkInfo(const networkInfo& from);

  inline networkInfo& operator=(const networkInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const networkInfo& default_instance();

  void Swap(networkInfo* other);

  // implements Message ----------------------------------------------

  networkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const networkInfo& from);
  void MergeFrom(const networkInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // optional string ipv4Addr = 3;
  inline bool has_ipv4addr() const;
  inline void clear_ipv4addr();
  static const int kIpv4AddrFieldNumber = 3;
  inline const ::std::string& ipv4addr() const;
  inline void set_ipv4addr(const ::std::string& value);
  inline void set_ipv4addr(const char* value);
  inline void set_ipv4addr(const char* value, size_t size);
  inline ::std::string* mutable_ipv4addr();
  inline ::std::string* release_ipv4addr();
  inline void set_allocated_ipv4addr(::std::string* ipv4addr);

  // optional string netMaskv4 = 4;
  inline bool has_netmaskv4() const;
  inline void clear_netmaskv4();
  static const int kNetMaskv4FieldNumber = 4;
  inline const ::std::string& netmaskv4() const;
  inline void set_netmaskv4(const ::std::string& value);
  inline void set_netmaskv4(const char* value);
  inline void set_netmaskv4(const char* value, size_t size);
  inline ::std::string* mutable_netmaskv4();
  inline ::std::string* release_netmaskv4();
  inline void set_allocated_netmaskv4(::std::string* netmaskv4);

  // optional string ipv6Addr = 5;
  inline bool has_ipv6addr() const;
  inline void clear_ipv6addr();
  static const int kIpv6AddrFieldNumber = 5;
  inline const ::std::string& ipv6addr() const;
  inline void set_ipv6addr(const ::std::string& value);
  inline void set_ipv6addr(const char* value);
  inline void set_ipv6addr(const char* value, size_t size);
  inline ::std::string* mutable_ipv6addr();
  inline ::std::string* release_ipv6addr();
  inline void set_allocated_ipv6addr(::std::string* ipv6addr);

  // optional uint32 netMaskv6 = 6;
  inline bool has_netmaskv6() const;
  inline void clear_netmaskv6();
  static const int kNetMaskv6FieldNumber = 6;
  inline ::google::protobuf::uint32 netmaskv6() const;
  inline void set_netmaskv6(::google::protobuf::uint32 value);

  // required uint32 flags = 7;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 7;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // required uint64 recvBytes = 8;
  inline bool has_recvbytes() const;
  inline void clear_recvbytes();
  static const int kRecvBytesFieldNumber = 8;
  inline ::google::protobuf::uint64 recvbytes() const;
  inline void set_recvbytes(::google::protobuf::uint64 value);

  // required uint64 recvPackages = 9;
  inline bool has_recvpackages() const;
  inline void clear_recvpackages();
  static const int kRecvPackagesFieldNumber = 9;
  inline ::google::protobuf::uint64 recvpackages() const;
  inline void set_recvpackages(::google::protobuf::uint64 value);

  // required uint64 recvErrorBytes = 10;
  inline bool has_recverrorbytes() const;
  inline void clear_recverrorbytes();
  static const int kRecvErrorBytesFieldNumber = 10;
  inline ::google::protobuf::uint64 recverrorbytes() const;
  inline void set_recverrorbytes(::google::protobuf::uint64 value);

  // required uint64 recvDropBytes = 11;
  inline bool has_recvdropbytes() const;
  inline void clear_recvdropbytes();
  static const int kRecvDropBytesFieldNumber = 11;
  inline ::google::protobuf::uint64 recvdropbytes() const;
  inline void set_recvdropbytes(::google::protobuf::uint64 value);

  // required uint64 recvFIFOBytes = 12;
  inline bool has_recvfifobytes() const;
  inline void clear_recvfifobytes();
  static const int kRecvFIFOBytesFieldNumber = 12;
  inline ::google::protobuf::uint64 recvfifobytes() const;
  inline void set_recvfifobytes(::google::protobuf::uint64 value);

  // required uint64 recvFrames = 13;
  inline bool has_recvframes() const;
  inline void clear_recvframes();
  static const int kRecvFramesFieldNumber = 13;
  inline ::google::protobuf::uint64 recvframes() const;
  inline void set_recvframes(::google::protobuf::uint64 value);

  // required uint64 recvCompressedBytes = 14;
  inline bool has_recvcompressedbytes() const;
  inline void clear_recvcompressedbytes();
  static const int kRecvCompressedBytesFieldNumber = 14;
  inline ::google::protobuf::uint64 recvcompressedbytes() const;
  inline void set_recvcompressedbytes(::google::protobuf::uint64 value);

  // required uint64 recvMultiCastBytes = 15;
  inline bool has_recvmulticastbytes() const;
  inline void clear_recvmulticastbytes();
  static const int kRecvMultiCastBytesFieldNumber = 15;
  inline ::google::protobuf::uint64 recvmulticastbytes() const;
  inline void set_recvmulticastbytes(::google::protobuf::uint64 value);

  // required uint64 transBytes = 16;
  inline bool has_transbytes() const;
  inline void clear_transbytes();
  static const int kTransBytesFieldNumber = 16;
  inline ::google::protobuf::uint64 transbytes() const;
  inline void set_transbytes(::google::protobuf::uint64 value);

  // required uint64 transPackages = 17;
  inline bool has_transpackages() const;
  inline void clear_transpackages();
  static const int kTransPackagesFieldNumber = 17;
  inline ::google::protobuf::uint64 transpackages() const;
  inline void set_transpackages(::google::protobuf::uint64 value);

  // required uint64 transErrorBytes = 18;
  inline bool has_transerrorbytes() const;
  inline void clear_transerrorbytes();
  static const int kTransErrorBytesFieldNumber = 18;
  inline ::google::protobuf::uint64 transerrorbytes() const;
  inline void set_transerrorbytes(::google::protobuf::uint64 value);

  // required uint64 transDropBytes = 19;
  inline bool has_transdropbytes() const;
  inline void clear_transdropbytes();
  static const int kTransDropBytesFieldNumber = 19;
  inline ::google::protobuf::uint64 transdropbytes() const;
  inline void set_transdropbytes(::google::protobuf::uint64 value);

  // required uint64 transFIFOBytes = 20;
  inline bool has_transfifobytes() const;
  inline void clear_transfifobytes();
  static const int kTransFIFOBytesFieldNumber = 20;
  inline ::google::protobuf::uint64 transfifobytes() const;
  inline void set_transfifobytes(::google::protobuf::uint64 value);

  // required uint64 transCompressedBytes = 21;
  inline bool has_transcompressedbytes() const;
  inline void clear_transcompressedbytes();
  static const int kTransCompressedBytesFieldNumber = 21;
  inline ::google::protobuf::uint64 transcompressedbytes() const;
  inline void set_transcompressedbytes(::google::protobuf::uint64 value);

  // required uint32 collisionTimes = 22;
  inline bool has_collisiontimes() const;
  inline void clear_collisiontimes();
  static const int kCollisionTimesFieldNumber = 22;
  inline ::google::protobuf::uint32 collisiontimes() const;
  inline void set_collisiontimes(::google::protobuf::uint32 value);

  // required uint32 carrierErrors = 23;
  inline bool has_carriererrors() const;
  inline void clear_carriererrors();
  static const int kCarrierErrorsFieldNumber = 23;
  inline ::google::protobuf::uint32 carriererrors() const;
  inline void set_carriererrors(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.eolwral.osmonitor.core.networkInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_ipv4addr();
  inline void clear_has_ipv4addr();
  inline void set_has_netmaskv4();
  inline void clear_has_netmaskv4();
  inline void set_has_ipv6addr();
  inline void clear_has_ipv6addr();
  inline void set_has_netmaskv6();
  inline void clear_has_netmaskv6();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_recvbytes();
  inline void clear_has_recvbytes();
  inline void set_has_recvpackages();
  inline void clear_has_recvpackages();
  inline void set_has_recverrorbytes();
  inline void clear_has_recverrorbytes();
  inline void set_has_recvdropbytes();
  inline void clear_has_recvdropbytes();
  inline void set_has_recvfifobytes();
  inline void clear_has_recvfifobytes();
  inline void set_has_recvframes();
  inline void clear_has_recvframes();
  inline void set_has_recvcompressedbytes();
  inline void clear_has_recvcompressedbytes();
  inline void set_has_recvmulticastbytes();
  inline void clear_has_recvmulticastbytes();
  inline void set_has_transbytes();
  inline void clear_has_transbytes();
  inline void set_has_transpackages();
  inline void clear_has_transpackages();
  inline void set_has_transerrorbytes();
  inline void clear_has_transerrorbytes();
  inline void set_has_transdropbytes();
  inline void clear_has_transdropbytes();
  inline void set_has_transfifobytes();
  inline void clear_has_transfifobytes();
  inline void set_has_transcompressedbytes();
  inline void clear_has_transcompressedbytes();
  inline void set_has_collisiontimes();
  inline void clear_has_collisiontimes();
  inline void set_has_carriererrors();
  inline void clear_has_carriererrors();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* mac_;
  ::std::string* ipv4addr_;
  ::std::string* netmaskv4_;
  ::std::string* ipv6addr_;
  ::google::protobuf::uint32 netmaskv6_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint64 recvbytes_;
  ::google::protobuf::uint64 recvpackages_;
  ::google::protobuf::uint64 recverrorbytes_;
  ::google::protobuf::uint64 recvdropbytes_;
  ::google::protobuf::uint64 recvfifobytes_;
  ::google::protobuf::uint64 recvframes_;
  ::google::protobuf::uint64 recvcompressedbytes_;
  ::google::protobuf::uint64 recvmulticastbytes_;
  ::google::protobuf::uint64 transbytes_;
  ::google::protobuf::uint64 transpackages_;
  ::google::protobuf::uint64 transerrorbytes_;
  ::google::protobuf::uint64 transdropbytes_;
  ::google::protobuf::uint64 transfifobytes_;
  ::google::protobuf::uint64 transcompressedbytes_;
  ::google::protobuf::uint32 collisiontimes_;
  ::google::protobuf::uint32 carriererrors_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_networkInfo_2eproto();
  friend void protobuf_AssignDesc_networkInfo_2eproto();
  friend void protobuf_ShutdownFile_networkInfo_2eproto();

  void InitAsDefaultInstance();
  static networkInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// networkInfo

// required string name = 1;
inline bool networkInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void networkInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void networkInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void networkInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& networkInfo::name() const {
  return *name_;
}
inline void networkInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void networkInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void networkInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* networkInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* networkInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void networkInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mac = 2;
inline bool networkInfo::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void networkInfo::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void networkInfo::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void networkInfo::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& networkInfo::mac() const {
  return *mac_;
}
inline void networkInfo::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void networkInfo::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void networkInfo::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* networkInfo::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* networkInfo::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void networkInfo::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ipv4Addr = 3;
inline bool networkInfo::has_ipv4addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void networkInfo::set_has_ipv4addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void networkInfo::clear_has_ipv4addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void networkInfo::clear_ipv4addr() {
  if (ipv4addr_ != &::google::protobuf::internal::kEmptyString) {
    ipv4addr_->clear();
  }
  clear_has_ipv4addr();
}
inline const ::std::string& networkInfo::ipv4addr() const {
  return *ipv4addr_;
}
inline void networkInfo::set_ipv4addr(const ::std::string& value) {
  set_has_ipv4addr();
  if (ipv4addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv4addr_ = new ::std::string;
  }
  ipv4addr_->assign(value);
}
inline void networkInfo::set_ipv4addr(const char* value) {
  set_has_ipv4addr();
  if (ipv4addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv4addr_ = new ::std::string;
  }
  ipv4addr_->assign(value);
}
inline void networkInfo::set_ipv4addr(const char* value, size_t size) {
  set_has_ipv4addr();
  if (ipv4addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv4addr_ = new ::std::string;
  }
  ipv4addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* networkInfo::mutable_ipv4addr() {
  set_has_ipv4addr();
  if (ipv4addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv4addr_ = new ::std::string;
  }
  return ipv4addr_;
}
inline ::std::string* networkInfo::release_ipv4addr() {
  clear_has_ipv4addr();
  if (ipv4addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv4addr_;
    ipv4addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void networkInfo::set_allocated_ipv4addr(::std::string* ipv4addr) {
  if (ipv4addr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv4addr_;
  }
  if (ipv4addr) {
    set_has_ipv4addr();
    ipv4addr_ = ipv4addr;
  } else {
    clear_has_ipv4addr();
    ipv4addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string netMaskv4 = 4;
inline bool networkInfo::has_netmaskv4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void networkInfo::set_has_netmaskv4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void networkInfo::clear_has_netmaskv4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void networkInfo::clear_netmaskv4() {
  if (netmaskv4_ != &::google::protobuf::internal::kEmptyString) {
    netmaskv4_->clear();
  }
  clear_has_netmaskv4();
}
inline const ::std::string& networkInfo::netmaskv4() const {
  return *netmaskv4_;
}
inline void networkInfo::set_netmaskv4(const ::std::string& value) {
  set_has_netmaskv4();
  if (netmaskv4_ == &::google::protobuf::internal::kEmptyString) {
    netmaskv4_ = new ::std::string;
  }
  netmaskv4_->assign(value);
}
inline void networkInfo::set_netmaskv4(const char* value) {
  set_has_netmaskv4();
  if (netmaskv4_ == &::google::protobuf::internal::kEmptyString) {
    netmaskv4_ = new ::std::string;
  }
  netmaskv4_->assign(value);
}
inline void networkInfo::set_netmaskv4(const char* value, size_t size) {
  set_has_netmaskv4();
  if (netmaskv4_ == &::google::protobuf::internal::kEmptyString) {
    netmaskv4_ = new ::std::string;
  }
  netmaskv4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* networkInfo::mutable_netmaskv4() {
  set_has_netmaskv4();
  if (netmaskv4_ == &::google::protobuf::internal::kEmptyString) {
    netmaskv4_ = new ::std::string;
  }
  return netmaskv4_;
}
inline ::std::string* networkInfo::release_netmaskv4() {
  clear_has_netmaskv4();
  if (netmaskv4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netmaskv4_;
    netmaskv4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void networkInfo::set_allocated_netmaskv4(::std::string* netmaskv4) {
  if (netmaskv4_ != &::google::protobuf::internal::kEmptyString) {
    delete netmaskv4_;
  }
  if (netmaskv4) {
    set_has_netmaskv4();
    netmaskv4_ = netmaskv4;
  } else {
    clear_has_netmaskv4();
    netmaskv4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ipv6Addr = 5;
inline bool networkInfo::has_ipv6addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void networkInfo::set_has_ipv6addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void networkInfo::clear_has_ipv6addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void networkInfo::clear_ipv6addr() {
  if (ipv6addr_ != &::google::protobuf::internal::kEmptyString) {
    ipv6addr_->clear();
  }
  clear_has_ipv6addr();
}
inline const ::std::string& networkInfo::ipv6addr() const {
  return *ipv6addr_;
}
inline void networkInfo::set_ipv6addr(const ::std::string& value) {
  set_has_ipv6addr();
  if (ipv6addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv6addr_ = new ::std::string;
  }
  ipv6addr_->assign(value);
}
inline void networkInfo::set_ipv6addr(const char* value) {
  set_has_ipv6addr();
  if (ipv6addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv6addr_ = new ::std::string;
  }
  ipv6addr_->assign(value);
}
inline void networkInfo::set_ipv6addr(const char* value, size_t size) {
  set_has_ipv6addr();
  if (ipv6addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv6addr_ = new ::std::string;
  }
  ipv6addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* networkInfo::mutable_ipv6addr() {
  set_has_ipv6addr();
  if (ipv6addr_ == &::google::protobuf::internal::kEmptyString) {
    ipv6addr_ = new ::std::string;
  }
  return ipv6addr_;
}
inline ::std::string* networkInfo::release_ipv6addr() {
  clear_has_ipv6addr();
  if (ipv6addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv6addr_;
    ipv6addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void networkInfo::set_allocated_ipv6addr(::std::string* ipv6addr) {
  if (ipv6addr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6addr_;
  }
  if (ipv6addr) {
    set_has_ipv6addr();
    ipv6addr_ = ipv6addr;
  } else {
    clear_has_ipv6addr();
    ipv6addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 netMaskv6 = 6;
inline bool networkInfo::has_netmaskv6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void networkInfo::set_has_netmaskv6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void networkInfo::clear_has_netmaskv6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void networkInfo::clear_netmaskv6() {
  netmaskv6_ = 0u;
  clear_has_netmaskv6();
}
inline ::google::protobuf::uint32 networkInfo::netmaskv6() const {
  return netmaskv6_;
}
inline void networkInfo::set_netmaskv6(::google::protobuf::uint32 value) {
  set_has_netmaskv6();
  netmaskv6_ = value;
}

// required uint32 flags = 7;
inline bool networkInfo::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void networkInfo::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
inline void networkInfo::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void networkInfo::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 networkInfo::flags() const {
  return flags_;
}
inline void networkInfo::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// required uint64 recvBytes = 8;
inline bool networkInfo::has_recvbytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void networkInfo::set_has_recvbytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void networkInfo::clear_has_recvbytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void networkInfo::clear_recvbytes() {
  recvbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvbytes();
}
inline ::google::protobuf::uint64 networkInfo::recvbytes() const {
  return recvbytes_;
}
inline void networkInfo::set_recvbytes(::google::protobuf::uint64 value) {
  set_has_recvbytes();
  recvbytes_ = value;
}

// required uint64 recvPackages = 9;
inline bool networkInfo::has_recvpackages() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void networkInfo::set_has_recvpackages() {
  _has_bits_[0] |= 0x00000100u;
}
inline void networkInfo::clear_has_recvpackages() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void networkInfo::clear_recvpackages() {
  recvpackages_ = GOOGLE_ULONGLONG(0);
  clear_has_recvpackages();
}
inline ::google::protobuf::uint64 networkInfo::recvpackages() const {
  return recvpackages_;
}
inline void networkInfo::set_recvpackages(::google::protobuf::uint64 value) {
  set_has_recvpackages();
  recvpackages_ = value;
}

// required uint64 recvErrorBytes = 10;
inline bool networkInfo::has_recverrorbytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void networkInfo::set_has_recverrorbytes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void networkInfo::clear_has_recverrorbytes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void networkInfo::clear_recverrorbytes() {
  recverrorbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recverrorbytes();
}
inline ::google::protobuf::uint64 networkInfo::recverrorbytes() const {
  return recverrorbytes_;
}
inline void networkInfo::set_recverrorbytes(::google::protobuf::uint64 value) {
  set_has_recverrorbytes();
  recverrorbytes_ = value;
}

// required uint64 recvDropBytes = 11;
inline bool networkInfo::has_recvdropbytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void networkInfo::set_has_recvdropbytes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void networkInfo::clear_has_recvdropbytes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void networkInfo::clear_recvdropbytes() {
  recvdropbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvdropbytes();
}
inline ::google::protobuf::uint64 networkInfo::recvdropbytes() const {
  return recvdropbytes_;
}
inline void networkInfo::set_recvdropbytes(::google::protobuf::uint64 value) {
  set_has_recvdropbytes();
  recvdropbytes_ = value;
}

// required uint64 recvFIFOBytes = 12;
inline bool networkInfo::has_recvfifobytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void networkInfo::set_has_recvfifobytes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void networkInfo::clear_has_recvfifobytes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void networkInfo::clear_recvfifobytes() {
  recvfifobytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvfifobytes();
}
inline ::google::protobuf::uint64 networkInfo::recvfifobytes() const {
  return recvfifobytes_;
}
inline void networkInfo::set_recvfifobytes(::google::protobuf::uint64 value) {
  set_has_recvfifobytes();
  recvfifobytes_ = value;
}

// required uint64 recvFrames = 13;
inline bool networkInfo::has_recvframes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void networkInfo::set_has_recvframes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void networkInfo::clear_has_recvframes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void networkInfo::clear_recvframes() {
  recvframes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvframes();
}
inline ::google::protobuf::uint64 networkInfo::recvframes() const {
  return recvframes_;
}
inline void networkInfo::set_recvframes(::google::protobuf::uint64 value) {
  set_has_recvframes();
  recvframes_ = value;
}

// required uint64 recvCompressedBytes = 14;
inline bool networkInfo::has_recvcompressedbytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void networkInfo::set_has_recvcompressedbytes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void networkInfo::clear_has_recvcompressedbytes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void networkInfo::clear_recvcompressedbytes() {
  recvcompressedbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvcompressedbytes();
}
inline ::google::protobuf::uint64 networkInfo::recvcompressedbytes() const {
  return recvcompressedbytes_;
}
inline void networkInfo::set_recvcompressedbytes(::google::protobuf::uint64 value) {
  set_has_recvcompressedbytes();
  recvcompressedbytes_ = value;
}

// required uint64 recvMultiCastBytes = 15;
inline bool networkInfo::has_recvmulticastbytes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void networkInfo::set_has_recvmulticastbytes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void networkInfo::clear_has_recvmulticastbytes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void networkInfo::clear_recvmulticastbytes() {
  recvmulticastbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_recvmulticastbytes();
}
inline ::google::protobuf::uint64 networkInfo::recvmulticastbytes() const {
  return recvmulticastbytes_;
}
inline void networkInfo::set_recvmulticastbytes(::google::protobuf::uint64 value) {
  set_has_recvmulticastbytes();
  recvmulticastbytes_ = value;
}

// required uint64 transBytes = 16;
inline bool networkInfo::has_transbytes() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void networkInfo::set_has_transbytes() {
  _has_bits_[0] |= 0x00008000u;
}
inline void networkInfo::clear_has_transbytes() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void networkInfo::clear_transbytes() {
  transbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_transbytes();
}
inline ::google::protobuf::uint64 networkInfo::transbytes() const {
  return transbytes_;
}
inline void networkInfo::set_transbytes(::google::protobuf::uint64 value) {
  set_has_transbytes();
  transbytes_ = value;
}

// required uint64 transPackages = 17;
inline bool networkInfo::has_transpackages() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void networkInfo::set_has_transpackages() {
  _has_bits_[0] |= 0x00010000u;
}
inline void networkInfo::clear_has_transpackages() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void networkInfo::clear_transpackages() {
  transpackages_ = GOOGLE_ULONGLONG(0);
  clear_has_transpackages();
}
inline ::google::protobuf::uint64 networkInfo::transpackages() const {
  return transpackages_;
}
inline void networkInfo::set_transpackages(::google::protobuf::uint64 value) {
  set_has_transpackages();
  transpackages_ = value;
}

// required uint64 transErrorBytes = 18;
inline bool networkInfo::has_transerrorbytes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void networkInfo::set_has_transerrorbytes() {
  _has_bits_[0] |= 0x00020000u;
}
inline void networkInfo::clear_has_transerrorbytes() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void networkInfo::clear_transerrorbytes() {
  transerrorbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_transerrorbytes();
}
inline ::google::protobuf::uint64 networkInfo::transerrorbytes() const {
  return transerrorbytes_;
}
inline void networkInfo::set_transerrorbytes(::google::protobuf::uint64 value) {
  set_has_transerrorbytes();
  transerrorbytes_ = value;
}

// required uint64 transDropBytes = 19;
inline bool networkInfo::has_transdropbytes() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void networkInfo::set_has_transdropbytes() {
  _has_bits_[0] |= 0x00040000u;
}
inline void networkInfo::clear_has_transdropbytes() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void networkInfo::clear_transdropbytes() {
  transdropbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_transdropbytes();
}
inline ::google::protobuf::uint64 networkInfo::transdropbytes() const {
  return transdropbytes_;
}
inline void networkInfo::set_transdropbytes(::google::protobuf::uint64 value) {
  set_has_transdropbytes();
  transdropbytes_ = value;
}

// required uint64 transFIFOBytes = 20;
inline bool networkInfo::has_transfifobytes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void networkInfo::set_has_transfifobytes() {
  _has_bits_[0] |= 0x00080000u;
}
inline void networkInfo::clear_has_transfifobytes() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void networkInfo::clear_transfifobytes() {
  transfifobytes_ = GOOGLE_ULONGLONG(0);
  clear_has_transfifobytes();
}
inline ::google::protobuf::uint64 networkInfo::transfifobytes() const {
  return transfifobytes_;
}
inline void networkInfo::set_transfifobytes(::google::protobuf::uint64 value) {
  set_has_transfifobytes();
  transfifobytes_ = value;
}

// required uint64 transCompressedBytes = 21;
inline bool networkInfo::has_transcompressedbytes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void networkInfo::set_has_transcompressedbytes() {
  _has_bits_[0] |= 0x00100000u;
}
inline void networkInfo::clear_has_transcompressedbytes() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void networkInfo::clear_transcompressedbytes() {
  transcompressedbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_transcompressedbytes();
}
inline ::google::protobuf::uint64 networkInfo::transcompressedbytes() const {
  return transcompressedbytes_;
}
inline void networkInfo::set_transcompressedbytes(::google::protobuf::uint64 value) {
  set_has_transcompressedbytes();
  transcompressedbytes_ = value;
}

// required uint32 collisionTimes = 22;
inline bool networkInfo::has_collisiontimes() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void networkInfo::set_has_collisiontimes() {
  _has_bits_[0] |= 0x00200000u;
}
inline void networkInfo::clear_has_collisiontimes() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void networkInfo::clear_collisiontimes() {
  collisiontimes_ = 0u;
  clear_has_collisiontimes();
}
inline ::google::protobuf::uint32 networkInfo::collisiontimes() const {
  return collisiontimes_;
}
inline void networkInfo::set_collisiontimes(::google::protobuf::uint32 value) {
  set_has_collisiontimes();
  collisiontimes_ = value;
}

// required uint32 carrierErrors = 23;
inline bool networkInfo::has_carriererrors() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void networkInfo::set_has_carriererrors() {
  _has_bits_[0] |= 0x00400000u;
}
inline void networkInfo::clear_has_carriererrors() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void networkInfo::clear_carriererrors() {
  carriererrors_ = 0u;
  clear_has_carriererrors();
}
inline ::google::protobuf::uint32 networkInfo::carriererrors() const {
  return carriererrors_;
}
inline void networkInfo::set_carriererrors(::google::protobuf::uint32 value) {
  set_has_carriererrors();
  carriererrors_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_networkInfo_2eproto__INCLUDED
