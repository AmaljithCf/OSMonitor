// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processorInfo.proto

#ifndef PROTOBUF_processorInfo_2eproto__INCLUDED
#define PROTOBUF_processorInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_processorInfo_2eproto();
void protobuf_AssignDesc_processorInfo_2eproto();
void protobuf_ShutdownFile_processorInfo_2eproto();

class processorInfo;

// ===================================================================

class processorInfo : public ::google::protobuf::Message {
 public:
  processorInfo();
  virtual ~processorInfo();

  processorInfo(const processorInfo& from);

  inline processorInfo& operator=(const processorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const processorInfo& default_instance();

  void Swap(processorInfo* other);

  // implements Message ----------------------------------------------

  processorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const processorInfo& from);
  void MergeFrom(const processorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 maxFrequency = 1;
  inline bool has_maxfrequency() const;
  inline void clear_maxfrequency();
  static const int kMaxFrequencyFieldNumber = 1;
  inline ::google::protobuf::int32 maxfrequency() const;
  inline void set_maxfrequency(::google::protobuf::int32 value);

  // required sint32 minFrequency = 2;
  inline bool has_minfrequency() const;
  inline void clear_minfrequency();
  static const int kMinFrequencyFieldNumber = 2;
  inline ::google::protobuf::int32 minfrequency() const;
  inline void set_minfrequency(::google::protobuf::int32 value);

  // required sint32 maxScaling = 3;
  inline bool has_maxscaling() const;
  inline void clear_maxscaling();
  static const int kMaxScalingFieldNumber = 3;
  inline ::google::protobuf::int32 maxscaling() const;
  inline void set_maxscaling(::google::protobuf::int32 value);

  // required sint32 minScaling = 4;
  inline bool has_minscaling() const;
  inline void clear_minscaling();
  static const int kMinScalingFieldNumber = 4;
  inline ::google::protobuf::int32 minscaling() const;
  inline void set_minscaling(::google::protobuf::int32 value);

  // required sint32 currentScaling = 5;
  inline bool has_currentscaling() const;
  inline void clear_currentscaling();
  static const int kCurrentScalingFieldNumber = 5;
  inline ::google::protobuf::int32 currentscaling() const;
  inline void set_currentscaling(::google::protobuf::int32 value);

  // required string grovernors = 6;
  inline bool has_grovernors() const;
  inline void clear_grovernors();
  static const int kGrovernorsFieldNumber = 6;
  inline const ::std::string& grovernors() const;
  inline void set_grovernors(const ::std::string& value);
  inline void set_grovernors(const char* value);
  inline void set_grovernors(const char* value, size_t size);
  inline ::std::string* mutable_grovernors();
  inline ::std::string* release_grovernors();
  inline void set_allocated_grovernors(::std::string* grovernors);

  // required uint32 number = 7;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 7;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // required bool offLine = 8;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOffLineFieldNumber = 8;
  inline bool offline() const;
  inline void set_offline(bool value);

  // required string avaiableGovernors = 9;
  inline bool has_avaiablegovernors() const;
  inline void clear_avaiablegovernors();
  static const int kAvaiableGovernorsFieldNumber = 9;
  inline const ::std::string& avaiablegovernors() const;
  inline void set_avaiablegovernors(const ::std::string& value);
  inline void set_avaiablegovernors(const char* value);
  inline void set_avaiablegovernors(const char* value, size_t size);
  inline ::std::string* mutable_avaiablegovernors();
  inline ::std::string* release_avaiablegovernors();
  inline void set_allocated_avaiablegovernors(::std::string* avaiablegovernors);

  // required string avaiableFrequeucy = 10;
  inline bool has_avaiablefrequeucy() const;
  inline void clear_avaiablefrequeucy();
  static const int kAvaiableFrequeucyFieldNumber = 10;
  inline const ::std::string& avaiablefrequeucy() const;
  inline void set_avaiablefrequeucy(const ::std::string& value);
  inline void set_avaiablefrequeucy(const char* value);
  inline void set_avaiablefrequeucy(const char* value, size_t size);
  inline ::std::string* mutable_avaiablefrequeucy();
  inline ::std::string* release_avaiablefrequeucy();
  inline void set_allocated_avaiablefrequeucy(::std::string* avaiablefrequeucy);

  // @@protoc_insertion_point(class_scope:com.eolwral.osmonitor.core.processorInfo)
 private:
  inline void set_has_maxfrequency();
  inline void clear_has_maxfrequency();
  inline void set_has_minfrequency();
  inline void clear_has_minfrequency();
  inline void set_has_maxscaling();
  inline void clear_has_maxscaling();
  inline void set_has_minscaling();
  inline void clear_has_minscaling();
  inline void set_has_currentscaling();
  inline void clear_has_currentscaling();
  inline void set_has_grovernors();
  inline void clear_has_grovernors();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_offline();
  inline void clear_has_offline();
  inline void set_has_avaiablegovernors();
  inline void clear_has_avaiablegovernors();
  inline void set_has_avaiablefrequeucy();
  inline void clear_has_avaiablefrequeucy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 maxfrequency_;
  ::google::protobuf::int32 minfrequency_;
  ::google::protobuf::int32 maxscaling_;
  ::google::protobuf::int32 minscaling_;
  ::std::string* grovernors_;
  ::google::protobuf::int32 currentscaling_;
  ::google::protobuf::uint32 number_;
  ::std::string* avaiablegovernors_;
  ::std::string* avaiablefrequeucy_;
  bool offline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_processorInfo_2eproto();
  friend void protobuf_AssignDesc_processorInfo_2eproto();
  friend void protobuf_ShutdownFile_processorInfo_2eproto();

  void InitAsDefaultInstance();
  static processorInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// processorInfo

// required sint32 maxFrequency = 1;
inline bool processorInfo::has_maxfrequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void processorInfo::set_has_maxfrequency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void processorInfo::clear_has_maxfrequency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void processorInfo::clear_maxfrequency() {
  maxfrequency_ = 0;
  clear_has_maxfrequency();
}
inline ::google::protobuf::int32 processorInfo::maxfrequency() const {
  return maxfrequency_;
}
inline void processorInfo::set_maxfrequency(::google::protobuf::int32 value) {
  set_has_maxfrequency();
  maxfrequency_ = value;
}

// required sint32 minFrequency = 2;
inline bool processorInfo::has_minfrequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void processorInfo::set_has_minfrequency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void processorInfo::clear_has_minfrequency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void processorInfo::clear_minfrequency() {
  minfrequency_ = 0;
  clear_has_minfrequency();
}
inline ::google::protobuf::int32 processorInfo::minfrequency() const {
  return minfrequency_;
}
inline void processorInfo::set_minfrequency(::google::protobuf::int32 value) {
  set_has_minfrequency();
  minfrequency_ = value;
}

// required sint32 maxScaling = 3;
inline bool processorInfo::has_maxscaling() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void processorInfo::set_has_maxscaling() {
  _has_bits_[0] |= 0x00000004u;
}
inline void processorInfo::clear_has_maxscaling() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void processorInfo::clear_maxscaling() {
  maxscaling_ = 0;
  clear_has_maxscaling();
}
inline ::google::protobuf::int32 processorInfo::maxscaling() const {
  return maxscaling_;
}
inline void processorInfo::set_maxscaling(::google::protobuf::int32 value) {
  set_has_maxscaling();
  maxscaling_ = value;
}

// required sint32 minScaling = 4;
inline bool processorInfo::has_minscaling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void processorInfo::set_has_minscaling() {
  _has_bits_[0] |= 0x00000008u;
}
inline void processorInfo::clear_has_minscaling() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void processorInfo::clear_minscaling() {
  minscaling_ = 0;
  clear_has_minscaling();
}
inline ::google::protobuf::int32 processorInfo::minscaling() const {
  return minscaling_;
}
inline void processorInfo::set_minscaling(::google::protobuf::int32 value) {
  set_has_minscaling();
  minscaling_ = value;
}

// required sint32 currentScaling = 5;
inline bool processorInfo::has_currentscaling() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void processorInfo::set_has_currentscaling() {
  _has_bits_[0] |= 0x00000010u;
}
inline void processorInfo::clear_has_currentscaling() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void processorInfo::clear_currentscaling() {
  currentscaling_ = 0;
  clear_has_currentscaling();
}
inline ::google::protobuf::int32 processorInfo::currentscaling() const {
  return currentscaling_;
}
inline void processorInfo::set_currentscaling(::google::protobuf::int32 value) {
  set_has_currentscaling();
  currentscaling_ = value;
}

// required string grovernors = 6;
inline bool processorInfo::has_grovernors() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void processorInfo::set_has_grovernors() {
  _has_bits_[0] |= 0x00000020u;
}
inline void processorInfo::clear_has_grovernors() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void processorInfo::clear_grovernors() {
  if (grovernors_ != &::google::protobuf::internal::kEmptyString) {
    grovernors_->clear();
  }
  clear_has_grovernors();
}
inline const ::std::string& processorInfo::grovernors() const {
  return *grovernors_;
}
inline void processorInfo::set_grovernors(const ::std::string& value) {
  set_has_grovernors();
  if (grovernors_ == &::google::protobuf::internal::kEmptyString) {
    grovernors_ = new ::std::string;
  }
  grovernors_->assign(value);
}
inline void processorInfo::set_grovernors(const char* value) {
  set_has_grovernors();
  if (grovernors_ == &::google::protobuf::internal::kEmptyString) {
    grovernors_ = new ::std::string;
  }
  grovernors_->assign(value);
}
inline void processorInfo::set_grovernors(const char* value, size_t size) {
  set_has_grovernors();
  if (grovernors_ == &::google::protobuf::internal::kEmptyString) {
    grovernors_ = new ::std::string;
  }
  grovernors_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* processorInfo::mutable_grovernors() {
  set_has_grovernors();
  if (grovernors_ == &::google::protobuf::internal::kEmptyString) {
    grovernors_ = new ::std::string;
  }
  return grovernors_;
}
inline ::std::string* processorInfo::release_grovernors() {
  clear_has_grovernors();
  if (grovernors_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grovernors_;
    grovernors_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void processorInfo::set_allocated_grovernors(::std::string* grovernors) {
  if (grovernors_ != &::google::protobuf::internal::kEmptyString) {
    delete grovernors_;
  }
  if (grovernors) {
    set_has_grovernors();
    grovernors_ = grovernors;
  } else {
    clear_has_grovernors();
    grovernors_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 number = 7;
inline bool processorInfo::has_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void processorInfo::set_has_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void processorInfo::clear_has_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void processorInfo::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 processorInfo::number() const {
  return number_;
}
inline void processorInfo::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// required bool offLine = 8;
inline bool processorInfo::has_offline() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void processorInfo::set_has_offline() {
  _has_bits_[0] |= 0x00000080u;
}
inline void processorInfo::clear_has_offline() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void processorInfo::clear_offline() {
  offline_ = false;
  clear_has_offline();
}
inline bool processorInfo::offline() const {
  return offline_;
}
inline void processorInfo::set_offline(bool value) {
  set_has_offline();
  offline_ = value;
}

// required string avaiableGovernors = 9;
inline bool processorInfo::has_avaiablegovernors() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void processorInfo::set_has_avaiablegovernors() {
  _has_bits_[0] |= 0x00000100u;
}
inline void processorInfo::clear_has_avaiablegovernors() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void processorInfo::clear_avaiablegovernors() {
  if (avaiablegovernors_ != &::google::protobuf::internal::kEmptyString) {
    avaiablegovernors_->clear();
  }
  clear_has_avaiablegovernors();
}
inline const ::std::string& processorInfo::avaiablegovernors() const {
  return *avaiablegovernors_;
}
inline void processorInfo::set_avaiablegovernors(const ::std::string& value) {
  set_has_avaiablegovernors();
  if (avaiablegovernors_ == &::google::protobuf::internal::kEmptyString) {
    avaiablegovernors_ = new ::std::string;
  }
  avaiablegovernors_->assign(value);
}
inline void processorInfo::set_avaiablegovernors(const char* value) {
  set_has_avaiablegovernors();
  if (avaiablegovernors_ == &::google::protobuf::internal::kEmptyString) {
    avaiablegovernors_ = new ::std::string;
  }
  avaiablegovernors_->assign(value);
}
inline void processorInfo::set_avaiablegovernors(const char* value, size_t size) {
  set_has_avaiablegovernors();
  if (avaiablegovernors_ == &::google::protobuf::internal::kEmptyString) {
    avaiablegovernors_ = new ::std::string;
  }
  avaiablegovernors_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* processorInfo::mutable_avaiablegovernors() {
  set_has_avaiablegovernors();
  if (avaiablegovernors_ == &::google::protobuf::internal::kEmptyString) {
    avaiablegovernors_ = new ::std::string;
  }
  return avaiablegovernors_;
}
inline ::std::string* processorInfo::release_avaiablegovernors() {
  clear_has_avaiablegovernors();
  if (avaiablegovernors_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avaiablegovernors_;
    avaiablegovernors_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void processorInfo::set_allocated_avaiablegovernors(::std::string* avaiablegovernors) {
  if (avaiablegovernors_ != &::google::protobuf::internal::kEmptyString) {
    delete avaiablegovernors_;
  }
  if (avaiablegovernors) {
    set_has_avaiablegovernors();
    avaiablegovernors_ = avaiablegovernors;
  } else {
    clear_has_avaiablegovernors();
    avaiablegovernors_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string avaiableFrequeucy = 10;
inline bool processorInfo::has_avaiablefrequeucy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void processorInfo::set_has_avaiablefrequeucy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void processorInfo::clear_has_avaiablefrequeucy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void processorInfo::clear_avaiablefrequeucy() {
  if (avaiablefrequeucy_ != &::google::protobuf::internal::kEmptyString) {
    avaiablefrequeucy_->clear();
  }
  clear_has_avaiablefrequeucy();
}
inline const ::std::string& processorInfo::avaiablefrequeucy() const {
  return *avaiablefrequeucy_;
}
inline void processorInfo::set_avaiablefrequeucy(const ::std::string& value) {
  set_has_avaiablefrequeucy();
  if (avaiablefrequeucy_ == &::google::protobuf::internal::kEmptyString) {
    avaiablefrequeucy_ = new ::std::string;
  }
  avaiablefrequeucy_->assign(value);
}
inline void processorInfo::set_avaiablefrequeucy(const char* value) {
  set_has_avaiablefrequeucy();
  if (avaiablefrequeucy_ == &::google::protobuf::internal::kEmptyString) {
    avaiablefrequeucy_ = new ::std::string;
  }
  avaiablefrequeucy_->assign(value);
}
inline void processorInfo::set_avaiablefrequeucy(const char* value, size_t size) {
  set_has_avaiablefrequeucy();
  if (avaiablefrequeucy_ == &::google::protobuf::internal::kEmptyString) {
    avaiablefrequeucy_ = new ::std::string;
  }
  avaiablefrequeucy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* processorInfo::mutable_avaiablefrequeucy() {
  set_has_avaiablefrequeucy();
  if (avaiablefrequeucy_ == &::google::protobuf::internal::kEmptyString) {
    avaiablefrequeucy_ = new ::std::string;
  }
  return avaiablefrequeucy_;
}
inline ::std::string* processorInfo::release_avaiablefrequeucy() {
  clear_has_avaiablefrequeucy();
  if (avaiablefrequeucy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avaiablefrequeucy_;
    avaiablefrequeucy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void processorInfo::set_allocated_avaiablefrequeucy(::std::string* avaiablefrequeucy) {
  if (avaiablefrequeucy_ != &::google::protobuf::internal::kEmptyString) {
    delete avaiablefrequeucy_;
  }
  if (avaiablefrequeucy) {
    set_has_avaiablefrequeucy();
    avaiablefrequeucy_ = avaiablefrequeucy;
  } else {
    clear_has_avaiablefrequeucy();
    avaiablefrequeucy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_processorInfo_2eproto__INCLUDED
