// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processInfo.proto

#ifndef PROTOBUF_processInfo_2eproto__INCLUDED
#define PROTOBUF_processInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_processInfo_2eproto();
void protobuf_AssignDesc_processInfo_2eproto();
void protobuf_ShutdownFile_processInfo_2eproto();

class processInfo;

enum processInfo_processStatus {
  processInfo_processStatus_Unknown = 0,
  processInfo_processStatus_Running = 1,
  processInfo_processStatus_Sleep = 2,
  processInfo_processStatus_Stopped = 3,
  processInfo_processStatus_Disk = 4,
  processInfo_processStatus_Zombie = 5,
  processInfo_processStatus_Page = 6
};
bool processInfo_processStatus_IsValid(int value);
const processInfo_processStatus processInfo_processStatus_processStatus_MIN = processInfo_processStatus_Unknown;
const processInfo_processStatus processInfo_processStatus_processStatus_MAX = processInfo_processStatus_Page;
const int processInfo_processStatus_processStatus_ARRAYSIZE = processInfo_processStatus_processStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* processInfo_processStatus_descriptor();
inline const ::std::string& processInfo_processStatus_Name(processInfo_processStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    processInfo_processStatus_descriptor(), value);
}
inline bool processInfo_processStatus_Parse(
    const ::std::string& name, processInfo_processStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<processInfo_processStatus>(
    processInfo_processStatus_descriptor(), name, value);
}
// ===================================================================

class processInfo : public ::google::protobuf::Message {
 public:
  processInfo();
  virtual ~processInfo();

  processInfo(const processInfo& from);

  inline processInfo& operator=(const processInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const processInfo& default_instance();

  void Swap(processInfo* other);

  // implements Message ----------------------------------------------

  processInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const processInfo& from);
  void MergeFrom(const processInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef processInfo_processStatus processStatus;
  static const processStatus Unknown = processInfo_processStatus_Unknown;
  static const processStatus Running = processInfo_processStatus_Running;
  static const processStatus Sleep = processInfo_processStatus_Sleep;
  static const processStatus Stopped = processInfo_processStatus_Stopped;
  static const processStatus Disk = processInfo_processStatus_Disk;
  static const processStatus Zombie = processInfo_processStatus_Zombie;
  static const processStatus Page = processInfo_processStatus_Page;
  static inline bool processStatus_IsValid(int value) {
    return processInfo_processStatus_IsValid(value);
  }
  static const processStatus processStatus_MIN =
    processInfo_processStatus_processStatus_MIN;
  static const processStatus processStatus_MAX =
    processInfo_processStatus_processStatus_MAX;
  static const int processStatus_ARRAYSIZE =
    processInfo_processStatus_processStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  processStatus_descriptor() {
    return processInfo_processStatus_descriptor();
  }
  static inline const ::std::string& processStatus_Name(processStatus value) {
    return processInfo_processStatus_Name(value);
  }
  static inline bool processStatus_Parse(const ::std::string& name,
      processStatus* value) {
    return processInfo_processStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  inline void set_allocated_owner(::std::string* owner);

  // required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::com::eolwral::osmonitor::core::processInfo_processStatus status() const;
  inline void set_status(::com::eolwral::osmonitor::core::processInfo_processStatus value);

  // required uint32 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 pid = 5;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 5;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // required uint32 ppid = 6;
  inline bool has_ppid() const;
  inline void clear_ppid();
  static const int kPpidFieldNumber = 6;
  inline ::google::protobuf::uint32 ppid() const;
  inline void set_ppid(::google::protobuf::uint32 value);

  // required uint64 rss = 7;
  inline bool has_rss() const;
  inline void clear_rss();
  static const int kRssFieldNumber = 7;
  inline ::google::protobuf::uint64 rss() const;
  inline void set_rss(::google::protobuf::uint64 value);

  // required uint64 vsz = 8;
  inline bool has_vsz() const;
  inline void clear_vsz();
  static const int kVszFieldNumber = 8;
  inline ::google::protobuf::uint64 vsz() const;
  inline void set_vsz(::google::protobuf::uint64 value);

  // required float cpuUsage = 9;
  inline bool has_cpuusage() const;
  inline void clear_cpuusage();
  static const int kCpuUsageFieldNumber = 9;
  inline float cpuusage() const;
  inline void set_cpuusage(float value);

  // required uint32 threadCount = 10;
  inline bool has_threadcount() const;
  inline void clear_threadcount();
  static const int kThreadCountFieldNumber = 10;
  inline ::google::protobuf::uint32 threadcount() const;
  inline void set_threadcount(::google::protobuf::uint32 value);

  // required uint32 priorityLevel = 11;
  inline bool has_prioritylevel() const;
  inline void clear_prioritylevel();
  static const int kPriorityLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 prioritylevel() const;
  inline void set_prioritylevel(::google::protobuf::uint32 value);

  // required uint64 usedUserTime = 12;
  inline bool has_usedusertime() const;
  inline void clear_usedusertime();
  static const int kUsedUserTimeFieldNumber = 12;
  inline ::google::protobuf::uint64 usedusertime() const;
  inline void set_usedusertime(::google::protobuf::uint64 value);

  // required uint64 usedSystemTime = 13;
  inline bool has_usedsystemtime() const;
  inline void clear_usedsystemtime();
  static const int kUsedSystemTimeFieldNumber = 13;
  inline ::google::protobuf::uint64 usedsystemtime() const;
  inline void set_usedsystemtime(::google::protobuf::uint64 value);

  // required uint64 startTime = 14;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 14;
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // required uint64 cpuTime = 15;
  inline bool has_cputime() const;
  inline void clear_cputime();
  static const int kCpuTimeFieldNumber = 15;
  inline ::google::protobuf::uint64 cputime() const;
  inline void set_cputime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.eolwral.osmonitor.core.processInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_ppid();
  inline void clear_has_ppid();
  inline void set_has_rss();
  inline void clear_has_rss();
  inline void set_has_vsz();
  inline void clear_has_vsz();
  inline void set_has_cpuusage();
  inline void clear_has_cpuusage();
  inline void set_has_threadcount();
  inline void clear_has_threadcount();
  inline void set_has_prioritylevel();
  inline void clear_has_prioritylevel();
  inline void set_has_usedusertime();
  inline void clear_has_usedusertime();
  inline void set_has_usedsystemtime();
  inline void clear_has_usedsystemtime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_cputime();
  inline void clear_has_cputime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* owner_;
  int status_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 ppid_;
  ::google::protobuf::uint64 rss_;
  ::google::protobuf::uint64 vsz_;
  float cpuusage_;
  ::google::protobuf::uint32 threadcount_;
  ::google::protobuf::uint64 usedusertime_;
  ::google::protobuf::uint64 usedsystemtime_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 cputime_;
  ::google::protobuf::uint32 prioritylevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_processInfo_2eproto();
  friend void protobuf_AssignDesc_processInfo_2eproto();
  friend void protobuf_ShutdownFile_processInfo_2eproto();

  void InitAsDefaultInstance();
  static processInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// processInfo

// required string name = 1;
inline bool processInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void processInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void processInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void processInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& processInfo::name() const {
  return *name_;
}
inline void processInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void processInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void processInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* processInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* processInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void processInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string owner = 2;
inline bool processInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void processInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void processInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void processInfo::clear_owner() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& processInfo::owner() const {
  return *owner_;
}
inline void processInfo::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void processInfo::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void processInfo::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* processInfo::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  return owner_;
}
inline ::std::string* processInfo::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void processInfo::set_allocated_owner(::std::string* owner) {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (owner) {
    set_has_owner();
    owner_ = owner;
  } else {
    clear_has_owner();
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
inline bool processInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void processInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void processInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void processInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::com::eolwral::osmonitor::core::processInfo_processStatus processInfo::status() const {
  return static_cast< ::com::eolwral::osmonitor::core::processInfo_processStatus >(status_);
}
inline void processInfo::set_status(::com::eolwral::osmonitor::core::processInfo_processStatus value) {
  assert(::com::eolwral::osmonitor::core::processInfo_processStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 uid = 4;
inline bool processInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void processInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void processInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void processInfo::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 processInfo::uid() const {
  return uid_;
}
inline void processInfo::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 pid = 5;
inline bool processInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void processInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void processInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void processInfo::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 processInfo::pid() const {
  return pid_;
}
inline void processInfo::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// required uint32 ppid = 6;
inline bool processInfo::has_ppid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void processInfo::set_has_ppid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void processInfo::clear_has_ppid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void processInfo::clear_ppid() {
  ppid_ = 0u;
  clear_has_ppid();
}
inline ::google::protobuf::uint32 processInfo::ppid() const {
  return ppid_;
}
inline void processInfo::set_ppid(::google::protobuf::uint32 value) {
  set_has_ppid();
  ppid_ = value;
}

// required uint64 rss = 7;
inline bool processInfo::has_rss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void processInfo::set_has_rss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void processInfo::clear_has_rss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void processInfo::clear_rss() {
  rss_ = GOOGLE_ULONGLONG(0);
  clear_has_rss();
}
inline ::google::protobuf::uint64 processInfo::rss() const {
  return rss_;
}
inline void processInfo::set_rss(::google::protobuf::uint64 value) {
  set_has_rss();
  rss_ = value;
}

// required uint64 vsz = 8;
inline bool processInfo::has_vsz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void processInfo::set_has_vsz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void processInfo::clear_has_vsz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void processInfo::clear_vsz() {
  vsz_ = GOOGLE_ULONGLONG(0);
  clear_has_vsz();
}
inline ::google::protobuf::uint64 processInfo::vsz() const {
  return vsz_;
}
inline void processInfo::set_vsz(::google::protobuf::uint64 value) {
  set_has_vsz();
  vsz_ = value;
}

// required float cpuUsage = 9;
inline bool processInfo::has_cpuusage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void processInfo::set_has_cpuusage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void processInfo::clear_has_cpuusage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void processInfo::clear_cpuusage() {
  cpuusage_ = 0;
  clear_has_cpuusage();
}
inline float processInfo::cpuusage() const {
  return cpuusage_;
}
inline void processInfo::set_cpuusage(float value) {
  set_has_cpuusage();
  cpuusage_ = value;
}

// required uint32 threadCount = 10;
inline bool processInfo::has_threadcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void processInfo::set_has_threadcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void processInfo::clear_has_threadcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void processInfo::clear_threadcount() {
  threadcount_ = 0u;
  clear_has_threadcount();
}
inline ::google::protobuf::uint32 processInfo::threadcount() const {
  return threadcount_;
}
inline void processInfo::set_threadcount(::google::protobuf::uint32 value) {
  set_has_threadcount();
  threadcount_ = value;
}

// required uint32 priorityLevel = 11;
inline bool processInfo::has_prioritylevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void processInfo::set_has_prioritylevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void processInfo::clear_has_prioritylevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void processInfo::clear_prioritylevel() {
  prioritylevel_ = 0u;
  clear_has_prioritylevel();
}
inline ::google::protobuf::uint32 processInfo::prioritylevel() const {
  return prioritylevel_;
}
inline void processInfo::set_prioritylevel(::google::protobuf::uint32 value) {
  set_has_prioritylevel();
  prioritylevel_ = value;
}

// required uint64 usedUserTime = 12;
inline bool processInfo::has_usedusertime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void processInfo::set_has_usedusertime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void processInfo::clear_has_usedusertime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void processInfo::clear_usedusertime() {
  usedusertime_ = GOOGLE_ULONGLONG(0);
  clear_has_usedusertime();
}
inline ::google::protobuf::uint64 processInfo::usedusertime() const {
  return usedusertime_;
}
inline void processInfo::set_usedusertime(::google::protobuf::uint64 value) {
  set_has_usedusertime();
  usedusertime_ = value;
}

// required uint64 usedSystemTime = 13;
inline bool processInfo::has_usedsystemtime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void processInfo::set_has_usedsystemtime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void processInfo::clear_has_usedsystemtime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void processInfo::clear_usedsystemtime() {
  usedsystemtime_ = GOOGLE_ULONGLONG(0);
  clear_has_usedsystemtime();
}
inline ::google::protobuf::uint64 processInfo::usedsystemtime() const {
  return usedsystemtime_;
}
inline void processInfo::set_usedsystemtime(::google::protobuf::uint64 value) {
  set_has_usedsystemtime();
  usedsystemtime_ = value;
}

// required uint64 startTime = 14;
inline bool processInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void processInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void processInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void processInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 processInfo::starttime() const {
  return starttime_;
}
inline void processInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
}

// required uint64 cpuTime = 15;
inline bool processInfo::has_cputime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void processInfo::set_has_cputime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void processInfo::clear_has_cputime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void processInfo::clear_cputime() {
  cputime_ = GOOGLE_ULONGLONG(0);
  clear_has_cputime();
}
inline ::google::protobuf::uint64 processInfo::cputime() const {
  return cputime_;
}
inline void processInfo::set_cputime(::google::protobuf::uint64 value) {
  set_has_cputime();
  cputime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::eolwral::osmonitor::core::processInfo_processStatus>() {
  return ::com::eolwral::osmonitor::core::processInfo_processStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_processInfo_2eproto__INCLUDED
