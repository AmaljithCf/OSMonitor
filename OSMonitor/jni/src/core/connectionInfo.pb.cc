// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connectionInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

namespace {

const ::google::protobuf::Descriptor* connectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  connectionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* connectionInfo_connectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* connectionInfo_connectionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_connectionInfo_2eproto() {
  protobuf_AddDesc_connectionInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "connectionInfo.proto");
  GOOGLE_CHECK(file != NULL);
  connectionInfo_descriptor_ = file->message_type(0);
  static const int connectionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, localip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, localport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, remoteip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, remoteport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, uid_),
  };
  connectionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      connectionInfo_descriptor_,
      connectionInfo::default_instance_,
      connectionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(connectionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(connectionInfo));
  connectionInfo_connectionType_descriptor_ = connectionInfo_descriptor_->enum_type(0);
  connectionInfo_connectionStatus_descriptor_ = connectionInfo_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_connectionInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    connectionInfo_descriptor_, &connectionInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connectionInfo_2eproto() {
  delete connectionInfo::default_instance_;
  delete connectionInfo_reflection_;
}

void protobuf_AddDesc_connectionInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024connectionInfo.proto\022\032com.eolwral.osmo"
    "nitor.core\"\237\004\n\016connectionInfo\022N\n\004Type\030\001 "
    "\002(\01629.com.eolwral.osmonitor.core.connect"
    "ionInfo.connectionType:\005TCPv4\022T\n\006Status\030"
    "\002 \002(\0162;.com.eolwral.osmonitor.core.conne"
    "ctionInfo.connectionStatus:\007UNKNOWN\022\017\n\007l"
    "ocalIP\030\003 \002(\t\022\021\n\tlocalPort\030\004 \002(\r\022\020\n\010remot"
    "eIP\030\005 \002(\t\022\022\n\nremotePort\030\006 \002(\r\022\013\n\003uid\030\007 \002"
    "(\r\"R\n\016connectionType\022\t\n\005TCPv4\020\000\022\t\n\005TCPv6"
    "\020\001\022\t\n\005UDPv4\020\002\022\t\n\005UDPv6\020\003\022\t\n\005RAWv4\020\004\022\t\n\005R"
    "AWv6\020\005\"\273\001\n\020connectionStatus\022\013\n\007UNKNOWN\020\000"
    "\022\017\n\013ESTABLISHED\020\001\022\014\n\010SYN_SENT\020\002\022\014\n\010SYN_R"
    "ECV\020\003\022\r\n\tFIN_WAIT1\020\004\022\r\n\tFIN_WAIT2\020\005\022\r\n\tT"
    "IME_WAIT\020\006\022\t\n\005CLOSE\020\007\022\016\n\nCLOSE_WAIT\020\010\022\014\n"
    "\010LAST_ACK\020\t\022\n\n\006LISTEN\020\n\022\013\n\007CLOSING\020\013", 596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "connectionInfo.proto", &protobuf_RegisterTypes);
  connectionInfo::default_instance_ = new connectionInfo();
  connectionInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connectionInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connectionInfo_2eproto {
  StaticDescriptorInitializer_connectionInfo_2eproto() {
    protobuf_AddDesc_connectionInfo_2eproto();
  }
} static_descriptor_initializer_connectionInfo_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* connectionInfo_connectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectionInfo_connectionType_descriptor_;
}
bool connectionInfo_connectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const connectionInfo_connectionType connectionInfo::TCPv4;
const connectionInfo_connectionType connectionInfo::TCPv6;
const connectionInfo_connectionType connectionInfo::UDPv4;
const connectionInfo_connectionType connectionInfo::UDPv6;
const connectionInfo_connectionType connectionInfo::RAWv4;
const connectionInfo_connectionType connectionInfo::RAWv6;
const connectionInfo_connectionType connectionInfo::connectionType_MIN;
const connectionInfo_connectionType connectionInfo::connectionType_MAX;
const int connectionInfo::connectionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* connectionInfo_connectionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectionInfo_connectionStatus_descriptor_;
}
bool connectionInfo_connectionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const connectionInfo_connectionStatus connectionInfo::UNKNOWN;
const connectionInfo_connectionStatus connectionInfo::ESTABLISHED;
const connectionInfo_connectionStatus connectionInfo::SYN_SENT;
const connectionInfo_connectionStatus connectionInfo::SYN_RECV;
const connectionInfo_connectionStatus connectionInfo::FIN_WAIT1;
const connectionInfo_connectionStatus connectionInfo::FIN_WAIT2;
const connectionInfo_connectionStatus connectionInfo::TIME_WAIT;
const connectionInfo_connectionStatus connectionInfo::CLOSE;
const connectionInfo_connectionStatus connectionInfo::CLOSE_WAIT;
const connectionInfo_connectionStatus connectionInfo::LAST_ACK;
const connectionInfo_connectionStatus connectionInfo::LISTEN;
const connectionInfo_connectionStatus connectionInfo::CLOSING;
const connectionInfo_connectionStatus connectionInfo::connectionStatus_MIN;
const connectionInfo_connectionStatus connectionInfo::connectionStatus_MAX;
const int connectionInfo::connectionStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int connectionInfo::kTypeFieldNumber;
const int connectionInfo::kStatusFieldNumber;
const int connectionInfo::kLocalIPFieldNumber;
const int connectionInfo::kLocalPortFieldNumber;
const int connectionInfo::kRemoteIPFieldNumber;
const int connectionInfo::kRemotePortFieldNumber;
const int connectionInfo::kUidFieldNumber;
#endif  // !_MSC_VER

connectionInfo::connectionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.eolwral.osmonitor.core.connectionInfo)
}

void connectionInfo::InitAsDefaultInstance() {
}

connectionInfo::connectionInfo(const connectionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.eolwral.osmonitor.core.connectionInfo)
}

void connectionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localport_ = 0u;
  remoteip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remoteport_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

connectionInfo::~connectionInfo() {
  // @@protoc_insertion_point(destructor:com.eolwral.osmonitor.core.connectionInfo)
  SharedDtor();
}

void connectionInfo::SharedDtor() {
  if (localip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localip_;
  }
  if (remoteip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remoteip_;
  }
  if (this != default_instance_) {
  }
}

void connectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* connectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return connectionInfo_descriptor_;
}

const connectionInfo& connectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connectionInfo_2eproto();
  return *default_instance_;
}

connectionInfo* connectionInfo::default_instance_ = NULL;

connectionInfo* connectionInfo::New() const {
  return new connectionInfo;
}

void connectionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<connectionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, status_);
    ZR_(localport_, uid_);
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localip_->clear();
      }
    }
    if (has_remoteip()) {
      if (remoteip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remoteip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool connectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.eolwral.osmonitor.core.connectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.eolwral.osmonitor.core.connectionInfo.connectionType Type = 1 [default = TCPv4];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::eolwral::osmonitor::core::connectionInfo_connectionType_IsValid(value)) {
            set_type(static_cast< ::com::eolwral::osmonitor::core::connectionInfo_connectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // required .com.eolwral.osmonitor.core.connectionInfo.connectionStatus Status = 2 [default = UNKNOWN];
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::eolwral::osmonitor::core::connectionInfo_connectionStatus_IsValid(value)) {
            set_status(static_cast< ::com::eolwral::osmonitor::core::connectionInfo_connectionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_localIP;
        break;
      }

      // required string localIP = 3;
      case 3: {
        if (tag == 26) {
         parse_localIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localip().data(), this->localip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "localip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_localPort;
        break;
      }

      // required uint32 localPort = 4;
      case 4: {
        if (tag == 32) {
         parse_localPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &localport_)));
          set_has_localport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remoteIP;
        break;
      }

      // required string remoteIP = 5;
      case 5: {
        if (tag == 42) {
         parse_remoteIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remoteip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remoteip().data(), this->remoteip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remoteip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_remotePort;
        break;
      }

      // required uint32 remotePort = 6;
      case 6: {
        if (tag == 48) {
         parse_remotePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remoteport_)));
          set_has_remoteport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_uid;
        break;
      }

      // required uint32 uid = 7;
      case 7: {
        if (tag == 56) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.eolwral.osmonitor.core.connectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.eolwral.osmonitor.core.connectionInfo)
  return false;
#undef DO_
}

void connectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.eolwral.osmonitor.core.connectionInfo)
  // required .com.eolwral.osmonitor.core.connectionInfo.connectionType Type = 1 [default = TCPv4];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .com.eolwral.osmonitor.core.connectionInfo.connectionStatus Status = 2 [default = UNKNOWN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string localIP = 3;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->localip(), output);
  }

  // required uint32 localPort = 4;
  if (has_localport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->localport(), output);
  }

  // required string remoteIP = 5;
  if (has_remoteip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remoteip().data(), this->remoteip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remoteip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->remoteip(), output);
  }

  // required uint32 remotePort = 6;
  if (has_remoteport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remoteport(), output);
  }

  // required uint32 uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.eolwral.osmonitor.core.connectionInfo)
}

::google::protobuf::uint8* connectionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.eolwral.osmonitor.core.connectionInfo)
  // required .com.eolwral.osmonitor.core.connectionInfo.connectionType Type = 1 [default = TCPv4];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .com.eolwral.osmonitor.core.connectionInfo.connectionStatus Status = 2 [default = UNKNOWN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string localIP = 3;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->localip(), target);
  }

  // required uint32 localPort = 4;
  if (has_localport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->localport(), target);
  }

  // required string remoteIP = 5;
  if (has_remoteip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remoteip().data(), this->remoteip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remoteip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remoteip(), target);
  }

  // required uint32 remotePort = 6;
  if (has_remoteport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remoteport(), target);
  }

  // required uint32 uid = 7;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.eolwral.osmonitor.core.connectionInfo)
  return target;
}

int connectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.eolwral.osmonitor.core.connectionInfo.connectionType Type = 1 [default = TCPv4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .com.eolwral.osmonitor.core.connectionInfo.connectionStatus Status = 2 [default = UNKNOWN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string localIP = 3;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localip());
    }

    // required uint32 localPort = 4;
    if (has_localport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->localport());
    }

    // required string remoteIP = 5;
    if (has_remoteip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remoteip());
    }

    // required uint32 remotePort = 6;
    if (has_remoteport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remoteport());
    }

    // required uint32 uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void connectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const connectionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const connectionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void connectionInfo::MergeFrom(const connectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_localip()) {
      set_localip(from.localip());
    }
    if (from.has_localport()) {
      set_localport(from.localport());
    }
    if (from.has_remoteip()) {
      set_remoteip(from.remoteip());
    }
    if (from.has_remoteport()) {
      set_remoteport(from.remoteport());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void connectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectionInfo::CopyFrom(const connectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void connectionInfo::Swap(connectionInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(localip_, other->localip_);
    std::swap(localport_, other->localport_);
    std::swap(remoteip_, other->remoteip_);
    std::swap(remoteport_, other->remoteport_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata connectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = connectionInfo_descriptor_;
  metadata.reflection = connectionInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

// @@protoc_insertion_point(global_scope)
