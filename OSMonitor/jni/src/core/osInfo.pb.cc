// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

namespace {

const ::google::protobuf::Descriptor* osInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  osInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osInfo_2eproto() {
  protobuf_AddDesc_osInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osInfo.proto");
  GOOGLE_CHECK(file != NULL);
  osInfo_descriptor_ = file->message_type(0);
  static const int osInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, totalmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, freememory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, sharedmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, bufferedmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, cachedmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, totalswap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, freeswap_),
  };
  osInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      osInfo_descriptor_,
      osInfo::default_instance_,
      osInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(osInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(osInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    osInfo_descriptor_, &osInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osInfo_2eproto() {
  delete osInfo::default_instance_;
  delete osInfo_reflection_;
}

void protobuf_AddDesc_osInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014osInfo.proto\022\032com.eolwral.osmonitor.co"
    "re\"\252\001\n\006osInfo\022\016\n\006uptime\030\001 \002(\004\022\023\n\013totalMe"
    "mory\030\002 \002(\004\022\022\n\nfreeMemory\030\003 \002(\004\022\024\n\014shared"
    "Memory\030\004 \002(\004\022\026\n\016bufferedMemory\030\005 \002(\004\022\024\n\014"
    "cachedMemory\030\006 \002(\004\022\021\n\ttotalSwap\030\007 \002(\004\022\020\n"
    "\010freeSwap\030\010 \002(\004", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osInfo.proto", &protobuf_RegisterTypes);
  osInfo::default_instance_ = new osInfo();
  osInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osInfo_2eproto {
  StaticDescriptorInitializer_osInfo_2eproto() {
    protobuf_AddDesc_osInfo_2eproto();
  }
} static_descriptor_initializer_osInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int osInfo::kUptimeFieldNumber;
const int osInfo::kTotalMemoryFieldNumber;
const int osInfo::kFreeMemoryFieldNumber;
const int osInfo::kSharedMemoryFieldNumber;
const int osInfo::kBufferedMemoryFieldNumber;
const int osInfo::kCachedMemoryFieldNumber;
const int osInfo::kTotalSwapFieldNumber;
const int osInfo::kFreeSwapFieldNumber;
#endif  // !_MSC_VER

osInfo::osInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void osInfo::InitAsDefaultInstance() {
}

osInfo::osInfo(const osInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void osInfo::SharedCtor() {
  _cached_size_ = 0;
  uptime_ = GOOGLE_ULONGLONG(0);
  totalmemory_ = GOOGLE_ULONGLONG(0);
  freememory_ = GOOGLE_ULONGLONG(0);
  sharedmemory_ = GOOGLE_ULONGLONG(0);
  bufferedmemory_ = GOOGLE_ULONGLONG(0);
  cachedmemory_ = GOOGLE_ULONGLONG(0);
  totalswap_ = GOOGLE_ULONGLONG(0);
  freeswap_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

osInfo::~osInfo() {
  SharedDtor();
}

void osInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void osInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* osInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return osInfo_descriptor_;
}

const osInfo& osInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osInfo_2eproto();  return *default_instance_;
}

osInfo* osInfo::default_instance_ = NULL;

osInfo* osInfo::New() const {
  return new osInfo;
}

void osInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uptime_ = GOOGLE_ULONGLONG(0);
    totalmemory_ = GOOGLE_ULONGLONG(0);
    freememory_ = GOOGLE_ULONGLONG(0);
    sharedmemory_ = GOOGLE_ULONGLONG(0);
    bufferedmemory_ = GOOGLE_ULONGLONG(0);
    cachedmemory_ = GOOGLE_ULONGLONG(0);
    totalswap_ = GOOGLE_ULONGLONG(0);
    freeswap_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool osInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uptime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
          set_has_uptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalMemory;
        break;
      }
      
      // required uint64 totalMemory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmemory_)));
          set_has_totalmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeMemory;
        break;
      }
      
      // required uint64 freeMemory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freememory_)));
          set_has_freememory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sharedMemory;
        break;
      }
      
      // required uint64 sharedMemory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharedMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharedmemory_)));
          set_has_sharedmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bufferedMemory;
        break;
      }
      
      // required uint64 bufferedMemory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferedMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bufferedmemory_)));
          set_has_bufferedmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cachedMemory;
        break;
      }
      
      // required uint64 cachedMemory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cachedMemory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cachedmemory_)));
          set_has_cachedmemory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalSwap;
        break;
      }
      
      // required uint64 totalSwap = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalSwap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalswap_)));
          set_has_totalswap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_freeSwap;
        break;
      }
      
      // required uint64 freeSwap = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeSwap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freeswap_)));
          set_has_freeswap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void osInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uptime = 1;
  if (has_uptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uptime(), output);
  }
  
  // required uint64 totalMemory = 2;
  if (has_totalmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalmemory(), output);
  }
  
  // required uint64 freeMemory = 3;
  if (has_freememory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->freememory(), output);
  }
  
  // required uint64 sharedMemory = 4;
  if (has_sharedmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sharedmemory(), output);
  }
  
  // required uint64 bufferedMemory = 5;
  if (has_bufferedmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bufferedmemory(), output);
  }
  
  // required uint64 cachedMemory = 6;
  if (has_cachedmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cachedmemory(), output);
  }
  
  // required uint64 totalSwap = 7;
  if (has_totalswap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->totalswap(), output);
  }
  
  // required uint64 freeSwap = 8;
  if (has_freeswap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->freeswap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* osInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uptime = 1;
  if (has_uptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uptime(), target);
  }
  
  // required uint64 totalMemory = 2;
  if (has_totalmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalmemory(), target);
  }
  
  // required uint64 freeMemory = 3;
  if (has_freememory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->freememory(), target);
  }
  
  // required uint64 sharedMemory = 4;
  if (has_sharedmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sharedmemory(), target);
  }
  
  // required uint64 bufferedMemory = 5;
  if (has_bufferedmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bufferedmemory(), target);
  }
  
  // required uint64 cachedMemory = 6;
  if (has_cachedmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cachedmemory(), target);
  }
  
  // required uint64 totalSwap = 7;
  if (has_totalswap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->totalswap(), target);
  }
  
  // required uint64 freeSwap = 8;
  if (has_freeswap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->freeswap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int osInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uptime = 1;
    if (has_uptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uptime());
    }
    
    // required uint64 totalMemory = 2;
    if (has_totalmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalmemory());
    }
    
    // required uint64 freeMemory = 3;
    if (has_freememory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freememory());
    }
    
    // required uint64 sharedMemory = 4;
    if (has_sharedmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharedmemory());
    }
    
    // required uint64 bufferedMemory = 5;
    if (has_bufferedmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bufferedmemory());
    }
    
    // required uint64 cachedMemory = 6;
    if (has_cachedmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cachedmemory());
    }
    
    // required uint64 totalSwap = 7;
    if (has_totalswap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalswap());
    }
    
    // required uint64 freeSwap = 8;
    if (has_freeswap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freeswap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void osInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const osInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const osInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void osInfo::MergeFrom(const osInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uptime()) {
      set_uptime(from.uptime());
    }
    if (from.has_totalmemory()) {
      set_totalmemory(from.totalmemory());
    }
    if (from.has_freememory()) {
      set_freememory(from.freememory());
    }
    if (from.has_sharedmemory()) {
      set_sharedmemory(from.sharedmemory());
    }
    if (from.has_bufferedmemory()) {
      set_bufferedmemory(from.bufferedmemory());
    }
    if (from.has_cachedmemory()) {
      set_cachedmemory(from.cachedmemory());
    }
    if (from.has_totalswap()) {
      set_totalswap(from.totalswap());
    }
    if (from.has_freeswap()) {
      set_freeswap(from.freeswap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void osInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void osInfo::CopyFrom(const osInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool osInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void osInfo::Swap(osInfo* other) {
  if (other != this) {
    std::swap(uptime_, other->uptime_);
    std::swap(totalmemory_, other->totalmemory_);
    std::swap(freememory_, other->freememory_);
    std::swap(sharedmemory_, other->sharedmemory_);
    std::swap(bufferedmemory_, other->bufferedmemory_);
    std::swap(cachedmemory_, other->cachedmemory_);
    std::swap(totalswap_, other->totalswap_);
    std::swap(freeswap_, other->freeswap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata osInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = osInfo_descriptor_;
  metadata.reflection = osInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

// @@protoc_insertion_point(global_scope)
