// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "networkInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

namespace {

const ::google::protobuf::Descriptor* networkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  networkInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_networkInfo_2eproto() {
  protobuf_AddDesc_networkInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "networkInfo.proto");
  GOOGLE_CHECK(file != NULL);
  networkInfo_descriptor_ = file->message_type(0);
  static const int networkInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, ipv4addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, netmaskv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, ipv6addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, netmaskv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvpackages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recverrorbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvdropbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvfifobytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvframes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvcompressedbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvmulticastbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transpackages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transerrorbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transdropbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transfifobytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transcompressedbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, collisiontimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, carriererrors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, transusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, recvusage_),
  };
  networkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      networkInfo_descriptor_,
      networkInfo::default_instance_,
      networkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(networkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(networkInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_networkInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    networkInfo_descriptor_, &networkInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_networkInfo_2eproto() {
  delete networkInfo::default_instance_;
  delete networkInfo_reflection_;
}

void protobuf_AddDesc_networkInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021networkInfo.proto\022\032com.eolwral.osmonit"
    "or.core\"\245\004\n\013networkInfo\022\014\n\004name\030\001 \002(\t\022\013\n"
    "\003mac\030\002 \002(\t\022\020\n\010ipv4Addr\030\003 \001(\t\022\021\n\tnetMaskv"
    "4\030\004 \001(\t\022\020\n\010ipv6Addr\030\005 \001(\t\022\021\n\tnetMaskv6\030\006"
    " \001(\r\022\r\n\005flags\030\007 \002(\r\022\021\n\trecvBytes\030\010 \002(\004\022\024"
    "\n\014recvPackages\030\t \002(\004\022\026\n\016recvErrorBytes\030\n"
    " \002(\004\022\025\n\rrecvDropBytes\030\013 \002(\004\022\025\n\rrecvFIFOB"
    "ytes\030\014 \002(\004\022\022\n\nrecvFrames\030\r \002(\004\022\033\n\023recvCo"
    "mpressedBytes\030\016 \002(\004\022\032\n\022recvMultiCastByte"
    "s\030\017 \002(\004\022\022\n\ntransBytes\030\020 \002(\004\022\025\n\rtransPack"
    "ages\030\021 \002(\004\022\027\n\017transErrorBytes\030\022 \002(\004\022\026\n\016t"
    "ransDropBytes\030\023 \002(\004\022\026\n\016transFIFOBytes\030\024 "
    "\002(\004\022\034\n\024transCompressedBytes\030\025 \002(\004\022\026\n\016col"
    "lisionTimes\030\026 \002(\r\022\025\n\rcarrierErrors\030\027 \002(\r"
    "\022\022\n\ntransUsage\030\030 \002(\004\022\021\n\trecvUsage\030\031 \002(\004", 599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "networkInfo.proto", &protobuf_RegisterTypes);
  networkInfo::default_instance_ = new networkInfo();
  networkInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_networkInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_networkInfo_2eproto {
  StaticDescriptorInitializer_networkInfo_2eproto() {
    protobuf_AddDesc_networkInfo_2eproto();
  }
} static_descriptor_initializer_networkInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int networkInfo::kNameFieldNumber;
const int networkInfo::kMacFieldNumber;
const int networkInfo::kIpv4AddrFieldNumber;
const int networkInfo::kNetMaskv4FieldNumber;
const int networkInfo::kIpv6AddrFieldNumber;
const int networkInfo::kNetMaskv6FieldNumber;
const int networkInfo::kFlagsFieldNumber;
const int networkInfo::kRecvBytesFieldNumber;
const int networkInfo::kRecvPackagesFieldNumber;
const int networkInfo::kRecvErrorBytesFieldNumber;
const int networkInfo::kRecvDropBytesFieldNumber;
const int networkInfo::kRecvFIFOBytesFieldNumber;
const int networkInfo::kRecvFramesFieldNumber;
const int networkInfo::kRecvCompressedBytesFieldNumber;
const int networkInfo::kRecvMultiCastBytesFieldNumber;
const int networkInfo::kTransBytesFieldNumber;
const int networkInfo::kTransPackagesFieldNumber;
const int networkInfo::kTransErrorBytesFieldNumber;
const int networkInfo::kTransDropBytesFieldNumber;
const int networkInfo::kTransFIFOBytesFieldNumber;
const int networkInfo::kTransCompressedBytesFieldNumber;
const int networkInfo::kCollisionTimesFieldNumber;
const int networkInfo::kCarrierErrorsFieldNumber;
const int networkInfo::kTransUsageFieldNumber;
const int networkInfo::kRecvUsageFieldNumber;
#endif  // !_MSC_VER

networkInfo::networkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.eolwral.osmonitor.core.networkInfo)
}

void networkInfo::InitAsDefaultInstance() {
}

networkInfo::networkInfo(const networkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.eolwral.osmonitor.core.networkInfo)
}

void networkInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskv4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netmaskv6_ = 0u;
  flags_ = 0u;
  recvbytes_ = GOOGLE_ULONGLONG(0);
  recvpackages_ = GOOGLE_ULONGLONG(0);
  recverrorbytes_ = GOOGLE_ULONGLONG(0);
  recvdropbytes_ = GOOGLE_ULONGLONG(0);
  recvfifobytes_ = GOOGLE_ULONGLONG(0);
  recvframes_ = GOOGLE_ULONGLONG(0);
  recvcompressedbytes_ = GOOGLE_ULONGLONG(0);
  recvmulticastbytes_ = GOOGLE_ULONGLONG(0);
  transbytes_ = GOOGLE_ULONGLONG(0);
  transpackages_ = GOOGLE_ULONGLONG(0);
  transerrorbytes_ = GOOGLE_ULONGLONG(0);
  transdropbytes_ = GOOGLE_ULONGLONG(0);
  transfifobytes_ = GOOGLE_ULONGLONG(0);
  transcompressedbytes_ = GOOGLE_ULONGLONG(0);
  collisiontimes_ = 0u;
  carriererrors_ = 0u;
  transusage_ = GOOGLE_ULONGLONG(0);
  recvusage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

networkInfo::~networkInfo() {
  // @@protoc_insertion_point(destructor:com.eolwral.osmonitor.core.networkInfo)
  SharedDtor();
}

void networkInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (ipv4addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv4addr_;
  }
  if (netmaskv4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netmaskv4_;
  }
  if (ipv6addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipv6addr_;
  }
  if (this != default_instance_) {
  }
}

void networkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* networkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return networkInfo_descriptor_;
}

const networkInfo& networkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_networkInfo_2eproto();
  return *default_instance_;
}

networkInfo* networkInfo::default_instance_ = NULL;

networkInfo* networkInfo::New() const {
  return new networkInfo;
}

void networkInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<networkInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(netmaskv6_, recvbytes_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_ipv4addr()) {
      if (ipv4addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipv4addr_->clear();
      }
    }
    if (has_netmaskv4()) {
      if (netmaskv4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netmaskv4_->clear();
      }
    }
    if (has_ipv6addr()) {
      if (ipv6addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ipv6addr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(recvpackages_, transbytes_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(transpackages_, transusage_);
  }
  recvusage_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool networkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.eolwral.osmonitor.core.networkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mac;
        break;
      }

      // required string mac = 2;
      case 2: {
        if (tag == 18) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipv4Addr;
        break;
      }

      // optional string ipv4Addr = 3;
      case 3: {
        if (tag == 26) {
         parse_ipv4Addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv4addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv4addr().data(), this->ipv4addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipv4addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_netMaskv4;
        break;
      }

      // optional string netMaskv4 = 4;
      case 4: {
        if (tag == 34) {
         parse_netMaskv4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmaskv4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netmaskv4().data(), this->netmaskv4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netmaskv4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ipv6Addr;
        break;
      }

      // optional string ipv6Addr = 5;
      case 5: {
        if (tag == 42) {
         parse_ipv6Addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6addr().data(), this->ipv6addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ipv6addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_netMaskv6;
        break;
      }

      // optional uint32 netMaskv6 = 6;
      case 6: {
        if (tag == 48) {
         parse_netMaskv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netmaskv6_)));
          set_has_netmaskv6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // required uint32 flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recvBytes;
        break;
      }

      // required uint64 recvBytes = 8;
      case 8: {
        if (tag == 64) {
         parse_recvBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvbytes_)));
          set_has_recvbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recvPackages;
        break;
      }

      // required uint64 recvPackages = 9;
      case 9: {
        if (tag == 72) {
         parse_recvPackages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvpackages_)));
          set_has_recvpackages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_recvErrorBytes;
        break;
      }

      // required uint64 recvErrorBytes = 10;
      case 10: {
        if (tag == 80) {
         parse_recvErrorBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recverrorbytes_)));
          set_has_recverrorbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_recvDropBytes;
        break;
      }

      // required uint64 recvDropBytes = 11;
      case 11: {
        if (tag == 88) {
         parse_recvDropBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvdropbytes_)));
          set_has_recvdropbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_recvFIFOBytes;
        break;
      }

      // required uint64 recvFIFOBytes = 12;
      case 12: {
        if (tag == 96) {
         parse_recvFIFOBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvfifobytes_)));
          set_has_recvfifobytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_recvFrames;
        break;
      }

      // required uint64 recvFrames = 13;
      case 13: {
        if (tag == 104) {
         parse_recvFrames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvframes_)));
          set_has_recvframes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_recvCompressedBytes;
        break;
      }

      // required uint64 recvCompressedBytes = 14;
      case 14: {
        if (tag == 112) {
         parse_recvCompressedBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvcompressedbytes_)));
          set_has_recvcompressedbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_recvMultiCastBytes;
        break;
      }

      // required uint64 recvMultiCastBytes = 15;
      case 15: {
        if (tag == 120) {
         parse_recvMultiCastBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvmulticastbytes_)));
          set_has_recvmulticastbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_transBytes;
        break;
      }

      // required uint64 transBytes = 16;
      case 16: {
        if (tag == 128) {
         parse_transBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transbytes_)));
          set_has_transbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_transPackages;
        break;
      }

      // required uint64 transPackages = 17;
      case 17: {
        if (tag == 136) {
         parse_transPackages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transpackages_)));
          set_has_transpackages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_transErrorBytes;
        break;
      }

      // required uint64 transErrorBytes = 18;
      case 18: {
        if (tag == 144) {
         parse_transErrorBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transerrorbytes_)));
          set_has_transerrorbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_transDropBytes;
        break;
      }

      // required uint64 transDropBytes = 19;
      case 19: {
        if (tag == 152) {
         parse_transDropBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transdropbytes_)));
          set_has_transdropbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_transFIFOBytes;
        break;
      }

      // required uint64 transFIFOBytes = 20;
      case 20: {
        if (tag == 160) {
         parse_transFIFOBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfifobytes_)));
          set_has_transfifobytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_transCompressedBytes;
        break;
      }

      // required uint64 transCompressedBytes = 21;
      case 21: {
        if (tag == 168) {
         parse_transCompressedBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transcompressedbytes_)));
          set_has_transcompressedbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_collisionTimes;
        break;
      }

      // required uint32 collisionTimes = 22;
      case 22: {
        if (tag == 176) {
         parse_collisionTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collisiontimes_)));
          set_has_collisiontimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_carrierErrors;
        break;
      }

      // required uint32 carrierErrors = 23;
      case 23: {
        if (tag == 184) {
         parse_carrierErrors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carriererrors_)));
          set_has_carriererrors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_transUsage;
        break;
      }

      // required uint64 transUsage = 24;
      case 24: {
        if (tag == 192) {
         parse_transUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transusage_)));
          set_has_transusage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_recvUsage;
        break;
      }

      // required uint64 recvUsage = 25;
      case 25: {
        if (tag == 200) {
         parse_recvUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvusage_)));
          set_has_recvusage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.eolwral.osmonitor.core.networkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.eolwral.osmonitor.core.networkInfo)
  return false;
#undef DO_
}

void networkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.eolwral.osmonitor.core.networkInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mac(), output);
  }

  // optional string ipv4Addr = 3;
  if (has_ipv4addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4addr().data(), this->ipv4addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv4addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ipv4addr(), output);
  }

  // optional string netMaskv4 = 4;
  if (has_netmaskv4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmaskv4().data(), this->netmaskv4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmaskv4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->netmaskv4(), output);
  }

  // optional string ipv6Addr = 5;
  if (has_ipv6addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6addr().data(), this->ipv6addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipv6addr(), output);
  }

  // optional uint32 netMaskv6 = 6;
  if (has_netmaskv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->netmaskv6(), output);
  }

  // required uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // required uint64 recvBytes = 8;
  if (has_recvbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->recvbytes(), output);
  }

  // required uint64 recvPackages = 9;
  if (has_recvpackages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->recvpackages(), output);
  }

  // required uint64 recvErrorBytes = 10;
  if (has_recverrorbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->recverrorbytes(), output);
  }

  // required uint64 recvDropBytes = 11;
  if (has_recvdropbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->recvdropbytes(), output);
  }

  // required uint64 recvFIFOBytes = 12;
  if (has_recvfifobytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->recvfifobytes(), output);
  }

  // required uint64 recvFrames = 13;
  if (has_recvframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->recvframes(), output);
  }

  // required uint64 recvCompressedBytes = 14;
  if (has_recvcompressedbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->recvcompressedbytes(), output);
  }

  // required uint64 recvMultiCastBytes = 15;
  if (has_recvmulticastbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->recvmulticastbytes(), output);
  }

  // required uint64 transBytes = 16;
  if (has_transbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->transbytes(), output);
  }

  // required uint64 transPackages = 17;
  if (has_transpackages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->transpackages(), output);
  }

  // required uint64 transErrorBytes = 18;
  if (has_transerrorbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->transerrorbytes(), output);
  }

  // required uint64 transDropBytes = 19;
  if (has_transdropbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->transdropbytes(), output);
  }

  // required uint64 transFIFOBytes = 20;
  if (has_transfifobytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->transfifobytes(), output);
  }

  // required uint64 transCompressedBytes = 21;
  if (has_transcompressedbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->transcompressedbytes(), output);
  }

  // required uint32 collisionTimes = 22;
  if (has_collisiontimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->collisiontimes(), output);
  }

  // required uint32 carrierErrors = 23;
  if (has_carriererrors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->carriererrors(), output);
  }

  // required uint64 transUsage = 24;
  if (has_transusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->transusage(), output);
  }

  // required uint64 recvUsage = 25;
  if (has_recvusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->recvusage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.eolwral.osmonitor.core.networkInfo)
}

::google::protobuf::uint8* networkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.eolwral.osmonitor.core.networkInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string mac = 2;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mac(), target);
  }

  // optional string ipv4Addr = 3;
  if (has_ipv4addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4addr().data(), this->ipv4addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv4addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ipv4addr(), target);
  }

  // optional string netMaskv4 = 4;
  if (has_netmaskv4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netmaskv4().data(), this->netmaskv4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netmaskv4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->netmaskv4(), target);
  }

  // optional string ipv6Addr = 5;
  if (has_ipv6addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6addr().data(), this->ipv6addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ipv6addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipv6addr(), target);
  }

  // optional uint32 netMaskv6 = 6;
  if (has_netmaskv6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->netmaskv6(), target);
  }

  // required uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // required uint64 recvBytes = 8;
  if (has_recvbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->recvbytes(), target);
  }

  // required uint64 recvPackages = 9;
  if (has_recvpackages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->recvpackages(), target);
  }

  // required uint64 recvErrorBytes = 10;
  if (has_recverrorbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->recverrorbytes(), target);
  }

  // required uint64 recvDropBytes = 11;
  if (has_recvdropbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->recvdropbytes(), target);
  }

  // required uint64 recvFIFOBytes = 12;
  if (has_recvfifobytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->recvfifobytes(), target);
  }

  // required uint64 recvFrames = 13;
  if (has_recvframes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->recvframes(), target);
  }

  // required uint64 recvCompressedBytes = 14;
  if (has_recvcompressedbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->recvcompressedbytes(), target);
  }

  // required uint64 recvMultiCastBytes = 15;
  if (has_recvmulticastbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->recvmulticastbytes(), target);
  }

  // required uint64 transBytes = 16;
  if (has_transbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->transbytes(), target);
  }

  // required uint64 transPackages = 17;
  if (has_transpackages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->transpackages(), target);
  }

  // required uint64 transErrorBytes = 18;
  if (has_transerrorbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->transerrorbytes(), target);
  }

  // required uint64 transDropBytes = 19;
  if (has_transdropbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->transdropbytes(), target);
  }

  // required uint64 transFIFOBytes = 20;
  if (has_transfifobytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->transfifobytes(), target);
  }

  // required uint64 transCompressedBytes = 21;
  if (has_transcompressedbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->transcompressedbytes(), target);
  }

  // required uint32 collisionTimes = 22;
  if (has_collisiontimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->collisiontimes(), target);
  }

  // required uint32 carrierErrors = 23;
  if (has_carriererrors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->carriererrors(), target);
  }

  // required uint64 transUsage = 24;
  if (has_transusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->transusage(), target);
  }

  // required uint64 recvUsage = 25;
  if (has_recvusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->recvusage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.eolwral.osmonitor.core.networkInfo)
  return target;
}

int networkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mac = 2;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string ipv4Addr = 3;
    if (has_ipv4addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv4addr());
    }

    // optional string netMaskv4 = 4;
    if (has_netmaskv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmaskv4());
    }

    // optional string ipv6Addr = 5;
    if (has_ipv6addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6addr());
    }

    // optional uint32 netMaskv6 = 6;
    if (has_netmaskv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netmaskv6());
    }

    // required uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint64 recvBytes = 8;
    if (has_recvbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvbytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 recvPackages = 9;
    if (has_recvpackages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvpackages());
    }

    // required uint64 recvErrorBytes = 10;
    if (has_recverrorbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recverrorbytes());
    }

    // required uint64 recvDropBytes = 11;
    if (has_recvdropbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvdropbytes());
    }

    // required uint64 recvFIFOBytes = 12;
    if (has_recvfifobytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvfifobytes());
    }

    // required uint64 recvFrames = 13;
    if (has_recvframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvframes());
    }

    // required uint64 recvCompressedBytes = 14;
    if (has_recvcompressedbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvcompressedbytes());
    }

    // required uint64 recvMultiCastBytes = 15;
    if (has_recvmulticastbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvmulticastbytes());
    }

    // required uint64 transBytes = 16;
    if (has_transbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transbytes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 transPackages = 17;
    if (has_transpackages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transpackages());
    }

    // required uint64 transErrorBytes = 18;
    if (has_transerrorbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transerrorbytes());
    }

    // required uint64 transDropBytes = 19;
    if (has_transdropbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transdropbytes());
    }

    // required uint64 transFIFOBytes = 20;
    if (has_transfifobytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transfifobytes());
    }

    // required uint64 transCompressedBytes = 21;
    if (has_transcompressedbytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transcompressedbytes());
    }

    // required uint32 collisionTimes = 22;
    if (has_collisiontimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collisiontimes());
    }

    // required uint32 carrierErrors = 23;
    if (has_carriererrors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carriererrors());
    }

    // required uint64 transUsage = 24;
    if (has_transusage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transusage());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint64 recvUsage = 25;
    if (has_recvusage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvusage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void networkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const networkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const networkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void networkInfo::MergeFrom(const networkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_ipv4addr()) {
      set_ipv4addr(from.ipv4addr());
    }
    if (from.has_netmaskv4()) {
      set_netmaskv4(from.netmaskv4());
    }
    if (from.has_ipv6addr()) {
      set_ipv6addr(from.ipv6addr());
    }
    if (from.has_netmaskv6()) {
      set_netmaskv6(from.netmaskv6());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_recvbytes()) {
      set_recvbytes(from.recvbytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recvpackages()) {
      set_recvpackages(from.recvpackages());
    }
    if (from.has_recverrorbytes()) {
      set_recverrorbytes(from.recverrorbytes());
    }
    if (from.has_recvdropbytes()) {
      set_recvdropbytes(from.recvdropbytes());
    }
    if (from.has_recvfifobytes()) {
      set_recvfifobytes(from.recvfifobytes());
    }
    if (from.has_recvframes()) {
      set_recvframes(from.recvframes());
    }
    if (from.has_recvcompressedbytes()) {
      set_recvcompressedbytes(from.recvcompressedbytes());
    }
    if (from.has_recvmulticastbytes()) {
      set_recvmulticastbytes(from.recvmulticastbytes());
    }
    if (from.has_transbytes()) {
      set_transbytes(from.transbytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transpackages()) {
      set_transpackages(from.transpackages());
    }
    if (from.has_transerrorbytes()) {
      set_transerrorbytes(from.transerrorbytes());
    }
    if (from.has_transdropbytes()) {
      set_transdropbytes(from.transdropbytes());
    }
    if (from.has_transfifobytes()) {
      set_transfifobytes(from.transfifobytes());
    }
    if (from.has_transcompressedbytes()) {
      set_transcompressedbytes(from.transcompressedbytes());
    }
    if (from.has_collisiontimes()) {
      set_collisiontimes(from.collisiontimes());
    }
    if (from.has_carriererrors()) {
      set_carriererrors(from.carriererrors());
    }
    if (from.has_transusage()) {
      set_transusage(from.transusage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_recvusage()) {
      set_recvusage(from.recvusage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void networkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void networkInfo::CopyFrom(const networkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool networkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffc3) != 0x01ffffc3) return false;

  return true;
}

void networkInfo::Swap(networkInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mac_, other->mac_);
    std::swap(ipv4addr_, other->ipv4addr_);
    std::swap(netmaskv4_, other->netmaskv4_);
    std::swap(ipv6addr_, other->ipv6addr_);
    std::swap(netmaskv6_, other->netmaskv6_);
    std::swap(flags_, other->flags_);
    std::swap(recvbytes_, other->recvbytes_);
    std::swap(recvpackages_, other->recvpackages_);
    std::swap(recverrorbytes_, other->recverrorbytes_);
    std::swap(recvdropbytes_, other->recvdropbytes_);
    std::swap(recvfifobytes_, other->recvfifobytes_);
    std::swap(recvframes_, other->recvframes_);
    std::swap(recvcompressedbytes_, other->recvcompressedbytes_);
    std::swap(recvmulticastbytes_, other->recvmulticastbytes_);
    std::swap(transbytes_, other->transbytes_);
    std::swap(transpackages_, other->transpackages_);
    std::swap(transerrorbytes_, other->transerrorbytes_);
    std::swap(transdropbytes_, other->transdropbytes_);
    std::swap(transfifobytes_, other->transfifobytes_);
    std::swap(transcompressedbytes_, other->transcompressedbytes_);
    std::swap(collisiontimes_, other->collisiontimes_);
    std::swap(carriererrors_, other->carriererrors_);
    std::swap(transusage_, other->transusage_);
    std::swap(recvusage_, other->recvusage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata networkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = networkInfo_descriptor_;
  metadata.reflection = networkInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

// @@protoc_insertion_point(global_scope)
