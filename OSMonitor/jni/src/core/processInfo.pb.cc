// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "processInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

namespace {

const ::google::protobuf::Descriptor* processInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  processInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* processInfo_processStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_processInfo_2eproto() {
  protobuf_AddDesc_processInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "processInfo.proto");
  GOOGLE_CHECK(file != NULL);
  processInfo_descriptor_ = file->message_type(0);
  static const int processInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, ppid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, rss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, vsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, cpuusage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, threadcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, prioritylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, usedusertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, usedsystemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, cputime_),
  };
  processInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      processInfo_descriptor_,
      processInfo::default_instance_,
      processInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(processInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(processInfo));
  processInfo_processStatus_descriptor_ = processInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_processInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    processInfo_descriptor_, &processInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_processInfo_2eproto() {
  delete processInfo::default_instance_;
  delete processInfo_reflection_;
}

void protobuf_AddDesc_processInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021processInfo.proto\022\032com.eolwral.osmonit"
    "or.core\"\257\003\n\013processInfo\022\014\n\004name\030\001 \002(\t\022\r\n"
    "\005owner\030\002 \002(\t\022N\n\006Status\030\003 \002(\01625.com.eolwr"
    "al.osmonitor.core.processInfo.processSta"
    "tus:\007Unknown\022\013\n\003uid\030\004 \002(\r\022\013\n\003pid\030\005 \002(\r\022\014"
    "\n\004ppid\030\006 \002(\r\022\013\n\003rss\030\007 \002(\004\022\013\n\003vsz\030\010 \002(\004\022\020"
    "\n\010cpuUsage\030\t \002(\002\022\023\n\013threadCount\030\n \002(\r\022\025\n"
    "\rpriorityLevel\030\013 \002(\r\022\024\n\014usedUserTime\030\014 \002"
    "(\004\022\026\n\016usedSystemTime\030\r \002(\004\022\021\n\tstartTime\030"
    "\016 \002(\004\022\017\n\007cpuTime\030\017 \002(\004\"a\n\rprocessStatus\022"
    "\013\n\007Unknown\020\000\022\013\n\007Running\020\001\022\t\n\005Sleep\020\002\022\013\n\007"
    "Stopped\020\003\022\010\n\004Disk\020\004\022\n\n\006Zombie\020\005\022\010\n\004Page\020"
    "\006", 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "processInfo.proto", &protobuf_RegisterTypes);
  processInfo::default_instance_ = new processInfo();
  processInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_processInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_processInfo_2eproto {
  StaticDescriptorInitializer_processInfo_2eproto() {
    protobuf_AddDesc_processInfo_2eproto();
  }
} static_descriptor_initializer_processInfo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* processInfo_processStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return processInfo_processStatus_descriptor_;
}
bool processInfo_processStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const processInfo_processStatus processInfo::Unknown;
const processInfo_processStatus processInfo::Running;
const processInfo_processStatus processInfo::Sleep;
const processInfo_processStatus processInfo::Stopped;
const processInfo_processStatus processInfo::Disk;
const processInfo_processStatus processInfo::Zombie;
const processInfo_processStatus processInfo::Page;
const processInfo_processStatus processInfo::processStatus_MIN;
const processInfo_processStatus processInfo::processStatus_MAX;
const int processInfo::processStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int processInfo::kNameFieldNumber;
const int processInfo::kOwnerFieldNumber;
const int processInfo::kStatusFieldNumber;
const int processInfo::kUidFieldNumber;
const int processInfo::kPidFieldNumber;
const int processInfo::kPpidFieldNumber;
const int processInfo::kRssFieldNumber;
const int processInfo::kVszFieldNumber;
const int processInfo::kCpuUsageFieldNumber;
const int processInfo::kThreadCountFieldNumber;
const int processInfo::kPriorityLevelFieldNumber;
const int processInfo::kUsedUserTimeFieldNumber;
const int processInfo::kUsedSystemTimeFieldNumber;
const int processInfo::kStartTimeFieldNumber;
const int processInfo::kCpuTimeFieldNumber;
#endif  // !_MSC_VER

processInfo::processInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void processInfo::InitAsDefaultInstance() {
}

processInfo::processInfo(const processInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void processInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  uid_ = 0u;
  pid_ = 0u;
  ppid_ = 0u;
  rss_ = GOOGLE_ULONGLONG(0);
  vsz_ = GOOGLE_ULONGLONG(0);
  cpuusage_ = 0;
  threadcount_ = 0u;
  prioritylevel_ = 0u;
  usedusertime_ = GOOGLE_ULONGLONG(0);
  usedsystemtime_ = GOOGLE_ULONGLONG(0);
  starttime_ = GOOGLE_ULONGLONG(0);
  cputime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

processInfo::~processInfo() {
  SharedDtor();
}

void processInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (this != default_instance_) {
  }
}

void processInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* processInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return processInfo_descriptor_;
}

const processInfo& processInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_processInfo_2eproto();  return *default_instance_;
}

processInfo* processInfo::default_instance_ = NULL;

processInfo* processInfo::New() const {
  return new processInfo;
}

void processInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
    status_ = 0;
    uid_ = 0u;
    pid_ = 0u;
    ppid_ = 0u;
    rss_ = GOOGLE_ULONGLONG(0);
    vsz_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cpuusage_ = 0;
    threadcount_ = 0u;
    prioritylevel_ = 0u;
    usedusertime_ = GOOGLE_ULONGLONG(0);
    usedsystemtime_ = GOOGLE_ULONGLONG(0);
    starttime_ = GOOGLE_ULONGLONG(0);
    cputime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool processInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner;
        break;
      }
      
      // required string owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }
      
      // required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::eolwral::osmonitor::core::processInfo_processStatus_IsValid(value)) {
            set_status(static_cast< ::com::eolwral::osmonitor::core::processInfo_processStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }
      
      // required uint32 pid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ppid;
        break;
      }
      
      // required uint32 ppid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rss;
        break;
      }
      
      // required uint64 rss = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rss_)));
          set_has_rss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vsz;
        break;
      }
      
      // required uint64 vsz = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vsz_)));
          set_has_vsz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_cpuUsage;
        break;
      }
      
      // required float cpuUsage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpuUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpuusage_)));
          set_has_cpuusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_threadCount;
        break;
      }
      
      // required uint32 threadCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threadCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threadcount_)));
          set_has_threadcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_priorityLevel;
        break;
      }
      
      // required uint32 priorityLevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priorityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prioritylevel_)));
          set_has_prioritylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_usedUserTime;
        break;
      }
      
      // required uint64 usedUserTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedUserTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedusertime_)));
          set_has_usedusertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_usedSystemTime;
        break;
      }
      
      // required uint64 usedSystemTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedSystemTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedsystemtime_)));
          set_has_usedsystemtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_startTime;
        break;
      }
      
      // required uint64 startTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cpuTime;
        break;
      }
      
      // required uint64 cpuTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpuTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cputime_)));
          set_has_cputime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void processInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->owner(), output);
  }
  
  // required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }
  
  // required uint32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }
  
  // required uint32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pid(), output);
  }
  
  // required uint32 ppid = 6;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ppid(), output);
  }
  
  // required uint64 rss = 7;
  if (has_rss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->rss(), output);
  }
  
  // required uint64 vsz = 8;
  if (has_vsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->vsz(), output);
  }
  
  // required float cpuUsage = 9;
  if (has_cpuusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cpuusage(), output);
  }
  
  // required uint32 threadCount = 10;
  if (has_threadcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->threadcount(), output);
  }
  
  // required uint32 priorityLevel = 11;
  if (has_prioritylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->prioritylevel(), output);
  }
  
  // required uint64 usedUserTime = 12;
  if (has_usedusertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->usedusertime(), output);
  }
  
  // required uint64 usedSystemTime = 13;
  if (has_usedsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->usedsystemtime(), output);
  }
  
  // required uint64 startTime = 14;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->starttime(), output);
  }
  
  // required uint64 cpuTime = 15;
  if (has_cputime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->cputime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* processInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner(), target);
  }
  
  // required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }
  
  // required uint32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }
  
  // required uint32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pid(), target);
  }
  
  // required uint32 ppid = 6;
  if (has_ppid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ppid(), target);
  }
  
  // required uint64 rss = 7;
  if (has_rss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->rss(), target);
  }
  
  // required uint64 vsz = 8;
  if (has_vsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->vsz(), target);
  }
  
  // required float cpuUsage = 9;
  if (has_cpuusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cpuusage(), target);
  }
  
  // required uint32 threadCount = 10;
  if (has_threadcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->threadcount(), target);
  }
  
  // required uint32 priorityLevel = 11;
  if (has_prioritylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->prioritylevel(), target);
  }
  
  // required uint64 usedUserTime = 12;
  if (has_usedusertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->usedusertime(), target);
  }
  
  // required uint64 usedSystemTime = 13;
  if (has_usedsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->usedsystemtime(), target);
  }
  
  // required uint64 startTime = 14;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->starttime(), target);
  }
  
  // required uint64 cpuTime = 15;
  if (has_cputime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->cputime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int processInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }
    
    // required .com.eolwral.osmonitor.core.processInfo.processStatus Status = 3 [default = Unknown];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required uint32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }
    
    // required uint32 ppid = 6;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ppid());
    }
    
    // required uint64 rss = 7;
    if (has_rss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rss());
    }
    
    // required uint64 vsz = 8;
    if (has_vsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vsz());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float cpuUsage = 9;
    if (has_cpuusage()) {
      total_size += 1 + 4;
    }
    
    // required uint32 threadCount = 10;
    if (has_threadcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threadcount());
    }
    
    // required uint32 priorityLevel = 11;
    if (has_prioritylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prioritylevel());
    }
    
    // required uint64 usedUserTime = 12;
    if (has_usedusertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedusertime());
    }
    
    // required uint64 usedSystemTime = 13;
    if (has_usedsystemtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedsystemtime());
    }
    
    // required uint64 startTime = 14;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }
    
    // required uint64 cpuTime = 15;
    if (has_cputime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cputime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void processInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const processInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const processInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void processInfo::MergeFrom(const processInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
    if (from.has_rss()) {
      set_rss(from.rss());
    }
    if (from.has_vsz()) {
      set_vsz(from.vsz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cpuusage()) {
      set_cpuusage(from.cpuusage());
    }
    if (from.has_threadcount()) {
      set_threadcount(from.threadcount());
    }
    if (from.has_prioritylevel()) {
      set_prioritylevel(from.prioritylevel());
    }
    if (from.has_usedusertime()) {
      set_usedusertime(from.usedusertime());
    }
    if (from.has_usedsystemtime()) {
      set_usedsystemtime(from.usedsystemtime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_cputime()) {
      set_cputime(from.cputime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void processInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void processInfo::CopyFrom(const processInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool processInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void processInfo::Swap(processInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(owner_, other->owner_);
    std::swap(status_, other->status_);
    std::swap(uid_, other->uid_);
    std::swap(pid_, other->pid_);
    std::swap(ppid_, other->ppid_);
    std::swap(rss_, other->rss_);
    std::swap(vsz_, other->vsz_);
    std::swap(cpuusage_, other->cpuusage_);
    std::swap(threadcount_, other->threadcount_);
    std::swap(prioritylevel_, other->prioritylevel_);
    std::swap(usedusertime_, other->usedusertime_);
    std::swap(usedsystemtime_, other->usedsystemtime_);
    std::swap(starttime_, other->starttime_);
    std::swap(cputime_, other->cputime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata processInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = processInfo_descriptor_;
  metadata.reflection = processInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

// @@protoc_insertion_point(global_scope)
